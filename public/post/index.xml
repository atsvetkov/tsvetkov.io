<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Surfing the code</title>
    <link>https://surfingthecode.com/post/index.xml</link>
    <description>Recent content in Posts on Surfing the code</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 01 May 2017 21:49:35 +0200</lastBuildDate>
    <atom:link href="https://surfingthecode.com/post/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Book review: Microservices in .NET Core by Christian Horsdal Gammelgaard</title>
      <link>https://surfingthecode.com/2017/05/book-review-microservices-in-.net-core-by-christian-horsdal-gammelgaard/</link>
      <pubDate>Mon, 01 May 2017 21:49:35 +0200</pubDate>
      
      <guid>https://surfingthecode.com/2017/05/book-review-microservices-in-.net-core-by-christian-horsdal-gammelgaard/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://www.manning.com/books/microservices-in-net-core&#34;&gt;
&lt;figure &gt;
    
        &lt;img src=&#34;https://surfingthecode.com/images/book_cover_microservices_in_dotnet_core.png&#34; /&gt;
    
    
&lt;/figure&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A few weeks ago I finished reading this book, which was quite an intersting view on the microservices design problem. Most of the articles related to this topic tend to be either very conceptual and high-level (&lt;em&gt;bounded context, culture shift, containers etc.&lt;/em&gt;) and usually describe how the whole distributed system should look like. One of the benefits of microservices is the ability to use different technologies for different services. And that makes total sense in a large enterprise, where you often &lt;em&gt;have&lt;/em&gt; to deal with multiple programming languages and frameworks, or in a unicorn startup, where just everything is possible. But I am sure there hundreds of smaller companies with software systems already built and core technologies already chosen. How do you step into the shiny world of microservices with your specific background? How do you implement a microservice itself in a given programming language?&lt;/p&gt;

&lt;p&gt;I feel that until now there wasn&amp;rsquo;t a good example of building microservices specifically in .NET and from &lt;em&gt;application architecture&lt;/em&gt; perspective instead of &lt;em&gt;enterprise architecture&lt;/em&gt;. And in my opinion, &lt;a href=&#34;https://www.manning.com/books/microservices-in-net-core&#34;&gt;&lt;em&gt;Microservices in .NET Core&lt;/em&gt; by Christian Horsdal Gammelgaard&lt;/a&gt; fills this gap in a very solid way. It uses an e-commerce system as an example throughout the book, starting by explaining basic microservices concepts and then going deep into detail across multiple topics, including reliability, testability, reusability, and many other -ilities. Christian uses a very structured approach, with eash chapter defining a generic problem area, then scoping it down to the specific software system being discussed, and then providing lots of code examples which show how to &lt;em&gt;actually&lt;/em&gt; implement a given feature. Some solutions are clearly opinionated, but very openly: such places are usually accompanied with a discussion of other options. For example, the suggested approach to asynchronous handling of cross-service events is to expose an &lt;code&gt;/events&lt;/code&gt; endpoint in a microservice, which allows any interested subscriber to fetch events that happened after a specified ID. That was a new idea to me, since I would normally think of a message queue as a way to publish/subscribe events, but obviously this simple implementation has its benefits: at a price of a tighter coupling between publishers and subscribers, we are avoiding all the complexity and additional efforts of managing message queues infrastructure.&lt;/p&gt;

&lt;p&gt;What I also really appreciated was the author&amp;rsquo;s going through common patterns in building distributed systems and giving practical solutions to them. If someone is building such a system for the first time, it might not be clear which cross-functional aspects should be taken into account. But retro-fitting them months later would be much, much harder than building them in right from the get go. So, Christian matter-of-factly explains how to support &lt;a href=&#34;https://articles.microservices.com/practical-microservices-correlation-tokens-75888baa5182&#34;&gt;correlation tokens&lt;/a&gt;, how to make microservices&amp;rsquo; communication robust with &lt;a href=&#34;https://github.com/App-vNext/Polly&#34;&gt;Polly&lt;/a&gt;, how to apply centralized logging with &lt;a href=&#34;https://serilog.net/&#34;&gt;Serilog&lt;/a&gt; and &lt;a href=&#34;https://www.elastic.co/&#34;&gt;Elasticsearch&lt;/a&gt;, and how the token-based authentication can be organized using &lt;a href=&#34;https://identityserver.io/&#34;&gt;IdentityServer&lt;/a&gt;. Some practical examples go even deeper into code level, showing, for instance, how &lt;a href=&#34;https://en.wikipedia.org/wiki/Factory_method_pattern&#34;&gt;a factory pattern&lt;/a&gt; can be used to inject standard HTTP headers into every request made by an &lt;code&gt;HttpClient&lt;/code&gt; instance. That, in my opinion, is what makes this book unique: whether you are an architect or a developer, you will find tons of useful information and hands-on code snippets.&lt;/p&gt;

&lt;p&gt;Another interesting point is that, despite talking about .NET Core, the book uses &lt;a href=&#34;http://nancyfx.org/&#34;&gt;Nancy&lt;/a&gt; as the web framework. Surely the same things could be achieved with vanilla ASP.NET Core, but Nancy allows to simplify so many things and write elegant and minimalistic code that is all about &lt;em&gt;your&lt;/em&gt; application logic, not plumbing and infrastructure. I&amp;rsquo;ve used it several years ago in one of the projects, and it was a joy to work with. Obviously, being a long-time user of and contributor to Nancy project, Christian explains everything about Nancy in a very detailed way and convincingly demonstrates that it is a viable alternative to other .NET web frameworks.&lt;/p&gt;

&lt;p&gt;With that said, there are certain parts in the book where everyone will have strong opinions on the topic. The suggested idea of packaging and reusing common middleware implementations as NuGet packages is probably a very good and practical solution, when one needs to implement many completely different new microservices &lt;em&gt;across differect organizations&lt;/em&gt;. However, when applied to dozens of constantly evolving services &lt;em&gt;in a single company&lt;/em&gt;, this might become difficult to maintain, since I think it would be quite hard to come up with such a middleware system upfront and expect no changes to it. And when changes do happen (new security infrastructure, a different distributed monitoring system etc.), this common package becomes a coupling point between many already deployed services, so updating them all without breaking any can become quite tricky. In some cases, as Sam Newman&amp;rsquo;s &lt;a href=&#34;http://shop.oreilly.com/product/0636920033158.do&#34;&gt;&lt;em&gt;Building Microservices&lt;/em&gt;&lt;/a&gt; book suggests, it might be beneficial to accept some level of code duplication and use source-controlled quickstart project templates with this common functionality instead of NuGet packages. In any case, both approaches have their places and the answer is always &amp;ldquo;it depends&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;In conclusion, I highly recommend this book to any .NET developer or architect interested in doing microservices and looking for practical advice. Also, there is &lt;a href=&#34;https://www.youtube.com/watch?v=DkG76TgntBQ&amp;amp;list=PL03Lrmd9CiGf2iIh4x8HM4iKmi6PhCe96&amp;amp;index=83&#34;&gt;Christian&amp;rsquo;s talk on NDC London 2017&lt;/a&gt;, where he touches upon similar topics, but more focusing on using ASP.NET Core middleware to add cross-cutting functionality to web applications and to compose these pieces into a reusable &lt;em&gt;microservices platform&lt;/em&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>c sharp7 deconstruction demystified</title>
      <link>https://surfingthecode.com/2017/04/c-sharp7-deconstruction-demystified/</link>
      <pubDate>Sun, 02 Apr 2017 13:22:56 +0200</pubDate>
      
      <guid>https://surfingthecode.com/2017/04/c-sharp7-deconstruction-demystified/</guid>
      <description>

&lt;p&gt;&lt;strong&gt;Update 2017-04-09&lt;/strong&gt;: &lt;em&gt;As pointed out by &lt;a href=&#34;http://blog.monstuff.com/&#34;&gt;Julien Couvreur&lt;/a&gt; in the comments, I made some incorrect conclusions about how compiler actually deconstructs ValueTuples. I assumed that this is done using the extensions methods in the System.ValueTuple NuGet package, while they are clearly declared on the older &lt;code&gt;System.Tuple&lt;/code&gt; type and are NOT being used for the deconstruction. In fact, C# compiler has built-in knowledge for ValueTuple type, so no extensions needed. More detailed explanation is available in &lt;a href=&#34;https://github.com/dotnet/roslyn/blob/master/docs/features/deconstruction.md&#34;&gt;this document&lt;/a&gt; in Roslyn repository on Github.&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&#34;introduction&#34;&gt;Introduction&lt;/h3&gt;

&lt;p&gt;Let&amp;rsquo;s talk about one of the cool new features of C# 7.0 - &lt;em&gt;deconstruction&lt;/em&gt;. Quite often you might need to return more than one value from a method, which can be accomplished in several ways:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;use &lt;a href=&#34;https://msdn.microsoft.com/en-us/library/t3c3bfhx.aspx&#34;&gt;&lt;code&gt;out&lt;/code&gt;&lt;/a&gt;/&lt;a href=&#34;https://msdn.microsoft.com/en-us/library/14akc2c7.aspx&#34;&gt;&lt;code&gt;ref&lt;/code&gt;&lt;/a&gt; arguments (usually considered a code smell)&lt;/li&gt;
&lt;li&gt;create a more meaningful class/struct that represents the result of calling the method (a preferable option, especially as the number of returned values grows)&lt;/li&gt;
&lt;li&gt;use &lt;a href=&#34;https://msdn.microsoft.com/en-us/library/system.tuple.aspx&#34;&gt;&lt;code&gt;System.Tuple&lt;/code&gt;&lt;/a&gt; (some kind of a middleground)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;They all work, but in fact only a special return type feels like a good solution, since both &lt;code&gt;out&lt;/code&gt; arguments and explicitly used tuples look just like a boilerplate code and don&amp;rsquo;t contribute to readable code.&lt;/p&gt;

&lt;h3 id=&#34;before-c-7-0&#34;&gt;Before C# 7.0&lt;/h3&gt;

&lt;p&gt;As an example, I&amp;rsquo;ll use a very simple &lt;code&gt;GetPositiveNumber&lt;/code&gt; method, which generates a random integer in the [-3, 3] interval and returns both the number and a boolean flag, specifying whether the nuber was actually positive. In previous versions of C#, if we followed the common &lt;code&gt;Try...&lt;/code&gt; method pattern, it could look like this (imagine all of the following code to be inside a class):&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/atsvetkov/838245cce67d0ba1ff730d9af7e37ee9.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;Rewritten with tuples, it would look not too different (but at least without &lt;code&gt;out&lt;/code&gt; arguments):&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/atsvetkov/be95d55c39620833fc120466231704c4.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;Not too bad. It already shows the intent of the code much better: clearly, the method returns two things packed into a container type. But when we try to write the code that calls this method, it begins to look ugly:&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/atsvetkov/5c65e720eae7a307c67d3ba278d4e11c.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;These &lt;code&gt;Item1&lt;/code&gt; and &lt;code&gt;Item2&lt;/code&gt; properties don&amp;rsquo;t really mean anything to the reader, they describe neither purpose, nor type. And this is exactly the problem that was solved with &lt;code&gt;ValueTuple&lt;/code&gt; and deconstruction in C# 7.0.&lt;/p&gt;

&lt;h3 id=&#34;deconstruction&#34;&gt;Deconstruction&lt;/h3&gt;

&lt;p&gt;What really felt wrong in the previous version of our code is that we could not give the tuple properties meaningful names and also we needed to first assign the tuple itself to a variable and only after that we could access the values. If you think about it, this is redundant: we are not interested in the tuple itself, we just want our values! So, C# 7.0 allows us to write the same functionality in a much shorter way:&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/atsvetkov/e065c97a041b524907873d4abb03bc07.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;&lt;strong&gt;(IMPORTANT: for this to work, you need to manually install a &lt;em&gt;System.ValueTuple&lt;/em&gt; NuGet package to your project, since the compiler will use types from it.)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This way both values we are actually interested in are immediately assigned to the corresponding variables - &lt;em&gt;all in one line&lt;/em&gt;! Also, the method signature now reads much better, since it is quite obvious that there are two return values.&lt;/p&gt;

&lt;p&gt;After 12 years of .NET development, this looks like magic. And I don&amp;rsquo;t like magic. So, if you are like me, the next thing you do is open your favourite IL disassembler (mine is &lt;a href=&#34;http://ilspy.net/&#34;&gt;ILSpy&lt;/a&gt;) and see what actually happens behind the scenes.&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://surfingthecode.com/images/csharp7-deconstruction-ilspy-method.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;So, essentially everything we wrote was just syntactic sugar, which then was turned into using a concrete &lt;code&gt;System.ValueTuple&lt;/code&gt; struct. We can also see that the method is now marked with a &lt;a href=&#34;https://github.com/dotnet/corefx/blob/master/src/System.ValueTuple/src/System/Runtime/CompilerServices/TupleElementNamesAttribute.cs&#34;&gt;&lt;code&gt;TupleElementNames&lt;/code&gt;&lt;/a&gt; attribute, which kept the names of the values returned by the original method. Obviously, we can deconstruct to local variables with any names, so this information is only preserved for displaying an Intellisense hint, when you hover over the method:&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://surfingthecode.com/images/csharp7-deconstruction-ilspy-intellisense.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;If we look at &lt;code&gt;ValueTuple&amp;lt;T1,T2&amp;gt;&lt;/code&gt; itself, there is nothing really interesting, just a struct with (again!) &lt;code&gt;Item1&lt;/code&gt; and &lt;code&gt;Item2&lt;/code&gt; properties:&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://surfingthecode.com/images/csharp7-deconstruction-ilspy-valuetuple.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;So, how does this struct get assigned to two variables at once? Turns out, the compiler will use &lt;a href=&#34;https://en.wikipedia.org/wiki/Duck_typing&#34;&gt;duck-typing&lt;/a&gt; and check if there is &lt;code&gt;Deconstruct&lt;/code&gt; method available on the type we are, well, deconstructing. Actually, the method doesn&amp;rsquo;t have to be defined in the type itself, it can be declared as an extension method - which is exactly the case for &lt;code&gt;System.ValueTuple&lt;/code&gt;:&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://surfingthecode.com/images/csharp7-deconstruction-ilspy-tupleextensions.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;&lt;del&gt;Finally, the magic is revealed! The C# compiler will convert our nice and readable code into a bit more boring code using &lt;code&gt;ValueTuple&lt;/code&gt;, and if there is a deconstruction statement used in the calling code, it will be rewritten with the &lt;code&gt;Deconstruct&lt;/code&gt; method, if such exists.&lt;/del&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Edit 2017-04-09&lt;/strong&gt;: &lt;em&gt;Turns out I was wrong here (thanks to Julien Couvreur for correcting me): C# compiler has built-in knowledge of &lt;code&gt;System.ValueTuple&lt;/code&gt; type, and moreover, the extensions methods above are clearly defined on a completely different type and have nothing to do with C# deconstruction syntax.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This bring us to another interesting question: can we only use deconstruction with these value tuples or with custom types as well?&lt;/p&gt;

&lt;h3 id=&#34;deconstructing-custom-types&#34;&gt;Deconstructing custom types&lt;/h3&gt;

&lt;p&gt;Since we already saw that deconstruction works by using duck-typing, you can guess that the same trick works with our custom return types too. When might this be useful? Imagine you already have some method that returns a class, not a tuple, and you still want to leverage the deconstruction pattern when &lt;em&gt;calling&lt;/em&gt; this existing method. Most likely you wouldn&amp;rsquo;t want to rewrite the method to use tuples (too much work probably) - and luckily you don&amp;rsquo;t have to! Just defining an extension method &lt;code&gt;Deconstruct&lt;/code&gt; on the return type is enough to make compiler happy:&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/atsvetkov/db1583d6ecf4a67faa6c7ad1f1f1f5e3.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;This is, in my opinion, the best way to write this kind of code, since we managed to combine the best of both worlds: the method now returns a type with a meaningful name (and can easily be extended with more properties, if necessary), while, with the help of an extension method, we could deconstruct the result into two local variables - &lt;em&gt;still in one line&lt;/em&gt;.&lt;/p&gt;

&lt;h3 id=&#34;summary&#34;&gt;Summary&lt;/h3&gt;

&lt;p&gt;One shouldn&amp;rsquo;t underestimate such language improvements: even though there is, strictly speaking, no new functionality here, it greatly reduces the amount of boilerplate code and improves redability by making the intent of a method much clearer. After all, human time is the most expensive resource in software development, so having less lines of code to read (without sacrificing readability) is a big win.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>coffee and links 6</title>
      <link>https://surfingthecode.com/2017/03/coffee-and-links-6/</link>
      <pubDate>Sat, 11 Mar 2017 18:11:53 +0100</pubDate>
      
      <guid>https://surfingthecode.com/2017/03/coffee-and-links-6/</guid>
      <description>


&lt;figure &gt;
    
        &lt;img src=&#34;https://surfingthecode.com/images/coffee-and-links-6.jpg&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;h3 id=&#34;visual-studio-2017-released&#34;&gt;Visual Studio 2017 released&lt;/h3&gt;

&lt;p&gt;The most significant event of this week was, of course, the &lt;a href=&#34;https://www.visualstudio.com/en-us/news/releasenotes/vs2017-relnotes&#34;&gt;launch of Visual Studio 2017&lt;/a&gt; by Microsoft. If you haven&amp;rsquo;t downloaded it yet, &lt;a href=&#34;https://www.visualstudio.com/downloads/&#34;&gt;go ahead&lt;/a&gt;! As promised, it really has a lot of improvements, like faster installation, shorter startup time, lightweight solution load, and much more.&lt;/p&gt;

&lt;p&gt;Code navigation and built-in refactorings are so good now, that first time in about 10 years I feel pretty comfortable without ReSharper. Seriously, last four days I&amp;rsquo;ve been coding without any third-party extensions and the only extra effort I had to make was pressing &lt;em&gt;Ctrl+.&lt;/em&gt; instead of so familiar &lt;em&gt;Alt+Enter&lt;/em&gt; (muscle memory strikes back here). I&amp;rsquo;m really curious to see what the future of ReSharper will be, given that &lt;a href=&#34;https://blog.jetbrains.com/dotnet/2014/04/10/resharper-and-roslyn-qa/&#34;&gt;a rewrite to support Roslyn is not going to happen&lt;/a&gt; and that &lt;a href=&#34;https://www.devexpress.com/products/coderush/&#34;&gt;CodeRush&lt;/a&gt; (a competing product from DevExpress) is already built on top of Roslyn platform. Perhaps, the main focus of JetBrains for .NET platform will be &lt;a href=&#34;https://www.jetbrains.com/rider/&#34;&gt;a new IDE called Rider&lt;/a&gt;? We&amp;rsquo;ll see.&lt;/p&gt;

&lt;p&gt;Another example of an improvement that makes a third-party tool kind of obsolete is &lt;a href=&#34;https://blogs.msdn.microsoft.com/visualstudio/2017/03/09/live-unit-testing-in-visual-studio-2017-enterprise/&#34;&gt;live unit testing feature&lt;/a&gt;. It does exactly what you&amp;rsquo;d think: continously runs the unit tests related to the code you are changing in the background (test projects can be included/excluded individually, which is important when there are integration tests in the same solution). And while &lt;a href=&#34;http://www.ncrunch.net/&#34;&gt;NCrunch&lt;/a&gt; has been the leading tool in this area this for years, I wonder if it is that relevant anymore. Of course, with live unit testing only available in VS 2017 Enterprise, lots of individual developers might still find NCrunch more affordable, so it will probably retain its niche.&lt;/p&gt;

&lt;h3 id=&#34;c-7-0-net-core-devops&#34;&gt;C# 7.0, .NET Core, DevOps&lt;/h3&gt;

&lt;p&gt;Of course, it wasn&amp;rsquo;t only about Visual Studio, and many other announcements were made. &lt;a href=&#34;https://blogs.msdn.microsoft.com/dotnet/2017/03/09/new-features-in-c-7-0/&#34;&gt;C# 7.0&lt;/a&gt; came out too, bringing all the neat new features (I already highlighted some of them &lt;a href=&#34;https://surfingthecode.com/2016/12/c-sharp-7.0-and-visual-studio-2017-rc/&#34;&gt;in one of my previous blog posts&lt;/a&gt;). &lt;a href=&#34;https://blogs.msdn.microsoft.com/dotnet/2017/03/07/announcing-net-core-tools-1-0/&#34;&gt;Tooling for .NET Core&lt;/a&gt; finally hit version 1.0.0, which was a milestone long-awaited by many .NET Core early adopters. After the two year journey through &lt;em&gt;ASP.NET vNext&lt;/em&gt;, &lt;em&gt;ASP.NET 5&lt;/em&gt;, &lt;em&gt;Project K&lt;/em&gt;, &lt;em&gt;DNX&lt;/em&gt; and various betas and RCs of &lt;em&gt;.NET Core&lt;/em&gt;, finally seeing this output in the console is very satisfying:&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://surfingthecode.com/images/dotnet-version.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;In ASP.NET Core area, there is now an easy support for using Docker containers (even debugging dockerized applications!), default web project templates now include frontend assets using &lt;a href=&#34;https://bower.io/&#34;&gt;Bower&lt;/a&gt; (in the past all JavaScript files used to be just fixed versions, without any package management), debugging client-side code is now possible in Chrome as well as IE, and an immensely popular &lt;a href=&#34;http://vswebessentials.com/&#34;&gt;Web Essentials&lt;/a&gt; extension pack &lt;a href=&#34;http://madskristensen.net/post/long-live-web-essentials&#34;&gt;has been updated for VS 2017 too&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;A lot of improvements were also made in DevOps area. How about &lt;a href=&#34;https://blogs.msdn.microsoft.com/visualstudio/2017/02/06/continuous-delivery-tools-extension-visual-studio-2017/&#34;&gt;configuring CI/CD pipeline with Visual Studio Team Services&lt;/a&gt; right from Visual Studio itself? As always, Microsoft makes this kind of things ridiculously easy, so there is no excuse for not using the best practices of agile software development anymore. Also, &lt;a href=&#34;https://www.red-gate.com/blog/database-lifecycle-management/visual-studio-2017-redgate-data-tools&#34;&gt;a new partnership with RedGate was announced&lt;/a&gt;, giving the users of Visual Studio 2017 Enterprise several built-in extensions, like &lt;a href=&#34;http://www.red-gate.com/products/sql-development/readyroll/entrypage/microsoft-and-readyroll&#34;&gt;ReadyRoll&lt;/a&gt;, a tool for managing database migrations in a very natural database-first way (for example, with &lt;a href=&#34;https://dbup.github.io/&#34;&gt;DbUp&lt;/a&gt; you would write the migration scripts as the first step and only then apply the changes, while with ReadyRoll you make changes to the local development database first and then tell the tool to generate the diff script).&lt;/p&gt;

&lt;p&gt;All these new features and many more were covered in the &lt;a href=&#34;https://channel9.msdn.com/Events/Visual-Studio/Visual-Studio-2017-Launch/100&#34;&gt;keynote&lt;/a&gt; and &lt;a href=&#34;https://channel9.msdn.com/Events/Visual-Studio/Visual-Studio-2017-Launch&#34;&gt;deep dive sessions&lt;/a&gt; on Channel 9, and also there is &lt;a href=&#34;https://www.dotnetrocks.com/?show=1422&#34;&gt;a new episode about Visual Studio 2017 on .NET Rocks&lt;/a&gt;. So, if you want to know more, go ahead - watch, listen, and of course try Visual Studio 2017 with C# 7.0 yourself, because it is seriously cool!&lt;/p&gt;

&lt;h3 id=&#34;bonus-link&#34;&gt;Bonus link&lt;/h3&gt;

&lt;p&gt;If you already started using VS 2017, you might have been wondering why the new icon looked so different from the previous versions:&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://surfingthecode.com/images/vs-2017-icon.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;To satisfy this curiosity of yours and mine, Visual Studio team has published a blog post explaining the design process and reasoning behind this choice, with a rather romantic title &lt;a href=&#34;https://blogs.msdn.microsoft.com/visualstudio/2017/03/08/iterations-on-infinity/&#34;&gt;&amp;ldquo;Iterations on infinity&amp;rdquo;&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>abusing dotnet core cli</title>
      <link>https://surfingthecode.com/2017/02/abusing-dotnet-core-cli/</link>
      <pubDate>Sat, 18 Feb 2017 14:35:25 +0100</pubDate>
      
      <guid>https://surfingthecode.com/2017/02/abusing-dotnet-core-cli/</guid>
      <description>

&lt;h3 id=&#34;dotnet-new-and-friends&#34;&gt;&amp;ldquo;dotnet new&amp;rdquo; and friends&lt;/h3&gt;

&lt;p&gt;When developing with .NET Core, you have two different workflows to choose from: manage projects from Visual Studio or work from a command-line using &lt;code&gt;dotnet&lt;/code&gt; commands. New projects can be created this way, and after the recent updates the project templates system became extensible, allowing to install additional templates or even create your own. For example, this is how the output of &lt;code&gt;dotnet new&lt;/code&gt; looks like by default with the latest RC installed (&lt;em&gt;.NET Core 1.0 SDK RC4&lt;/em&gt;, to be specific):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; dotnet new
Template Instantiation Commands for .NET Core CLI.

Usage: dotnet new [arguments] [options]

Arguments:
  template  The template to instantiate.

Options:
  -l|--list         List templates containing the specified name.
  -lang|--language  Specifies the language of the template to create
  -n|--name         The name for the output being created. If no name is specified, the name of the current directory is used.
  -o|--output       Location to place the generated output.
  -h|--help         Displays help for this command.
  -all|--show-all   Shows all templates


Templates                                 Short Name      Language      Tags
--------------------------------------------------------------------------------------
Console Application                       console         [C#], F#      Common/Console
Class library                             classlib        [C#], F#      Common/Library
Unit Test Project                         mstest          [C#], F#      Test/MSTest
xUnit Test Project                        xunit           [C#], F#      Test/xUnit
Empty ASP.NET Core Web Application        web             [C#]          Web/Empty
MVC ASP.NET Core Web Application          mvc             [C#], F#      Web/MVC
Web API ASP.NET Core Web Application      webapi          [C#]          Web/WebAPI
Solution File                             sln                           Solution

Examples:
    dotnet new mvc --auth None --framework netcoreapp1.0
    dotnet new classlib --framework netstandard1.4
    dotnet new --help
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can additionally install &lt;a href=&#34;https://blogs.msdn.microsoft.com/webdev/2017/02/14/building-single-page-applications-on-asp-net-core-with-javascriptservices/&#34;&gt;JavaScriptServices&lt;/a&gt; templates like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;dotnet new --install Microsoft.AspNetCore.SpaTemplates::*
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As mentioned in the recent &lt;a href=&#34;https://www.youtube.com/watch?v=q88i3oDWp80&#34;&gt;ASP.NET Community Standup&lt;/a&gt;, the asterisk at the end means &amp;ldquo;any version&amp;rdquo; and is required, because &lt;code&gt;--install&lt;/code&gt; argument needs a version to be specified.&lt;/p&gt;

&lt;p&gt;Now, when we execute &lt;code&gt;dotnet new&lt;/code&gt; once again, the list will have more items and we can use these nicely preconfigured .NET Core + React/Angular/etc. projects:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Templates                                  Short Name      Language      Tags
---------------------------------------------------------------------------------------
Console Application                        console         [C#], F#      Common/Console
Class library                              classlib        [C#], F#      Common/Library
Unit Test Project                          mstest          [C#], F#      Test/MSTest
xUnit Test Project                         xunit           [C#], F#      Test/xUnit
Empty ASP.NET Core Web Application         web             [C#]          Web/Empty
MVC ASP.NET Core Web Application           mvc             [C#], F#      Web/MVC
MVC ASP.NET Core with Angular              angular         [C#]          Web/MVC/SPA
MVC ASP.NET Core with Aurelia              aurelia         [C#]          Web/MVC/SPA
MVC ASP.NET Core with Knockout.js          knockout        [C#]          Web/MVC/SPA
MVC ASP.NET Core with React.js             react           [C#]          Web/MVC/SPA
MVC ASP.NET Core with React.js and Redux   reactredux      [C#]          Web/MVC/SPA
Web API ASP.NET Core Web Application       webapi          [C#]          Web/WebAPI
Solution File                              sln                           Solution
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;These new SPA templates are built by &lt;a href=&#34;http://blog.stevensanderson.com/&#34;&gt;Steve Sanderson&lt;/a&gt; (the author of &lt;a href=&#34;http://knockoutjs.com/&#34;&gt;knockout.js&lt;/a&gt;) together with the ASP.NET team and deserve a separate post, so I&amp;rsquo;m not going to discuss them now. What I want to talk about instead is the extensibility of &lt;code&gt;dotnet&lt;/code&gt; command itself.&lt;/p&gt;

&lt;h3 id=&#34;how-dotnet-command-works&#34;&gt;How &amp;ldquo;dotnet&amp;rdquo; command works&lt;/h3&gt;

&lt;p&gt;Obviously, there is not too much magic: the .NET Core installer copies &lt;code&gt;dotnet.exe&lt;/code&gt; to &lt;em&gt;C:\Program Files\dotnet&lt;/em&gt; and adds this directory to PATH. When in doubt, remember about &lt;code&gt;where&lt;/code&gt; command, which can help identify the location of an executable:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; where dotnet
C:\Program Files\dotnet\dotnet.exe
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In most cases &lt;code&gt;dotnet&lt;/code&gt; command will be executed with an additonal argument, which is the actual action we want to perform, like &lt;code&gt;new&lt;/code&gt;, &lt;code&gt;build&lt;/code&gt;, or &lt;code&gt;run&lt;/code&gt;. The list of supported ones can be displayed by running &lt;code&gt;dotnet help&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Commands:
  new           Initialize .NET projects.
  restore       Restore dependencies specified in the .NET project.
  build         Builds a .NET project.
  publish       Publishes a .NET project for deployment (including the runtime).
  run           Compiles and immediately executes a .NET project.
  test          Runs unit tests using the test runner specified in the project.
  pack          Creates a NuGet package.
  migrate       Migrates a project.json based project to a msbuild based project.
  clean         Clean build output(s).
  sln           Modify solution (SLN) files.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;All of them are the built-in commands, which can be seen &lt;a href=&#34;https://github.com/dotnet/cli/blob/rel/1.0.0/src/dotnet/Program.cs&#34;&gt;in the source code on Github&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class Program
{
    private static Dictionary&amp;lt;string, Func&amp;lt;string[], int&amp;gt;&amp;gt; s_builtIns = new Dictionary&amp;lt;string, Func&amp;lt;string[], int&amp;gt;&amp;gt;
    {
        [&amp;quot;add&amp;quot;] = AddCommand.Run,
        [&amp;quot;build&amp;quot;] = BuildCommand.Run,
        [&amp;quot;clean&amp;quot;] = CleanCommand.Run,
        [&amp;quot;help&amp;quot;] = HelpCommand.Run,
        [&amp;quot;list&amp;quot;] = ListCommand.Run,
        [&amp;quot;migrate&amp;quot;] = MigrateCommand.Run,
        [&amp;quot;msbuild&amp;quot;] = MSBuildCommand.Run,
        [&amp;quot;new&amp;quot;] = NewCommandShim.Run,
        [&amp;quot;nuget&amp;quot;] = NuGetCommand.Run,
        [&amp;quot;pack&amp;quot;] = PackCommand.Run,
        [&amp;quot;publish&amp;quot;] = PublishCommand.Run,
        [&amp;quot;remove&amp;quot;] = RemoveCommand.Run,
        [&amp;quot;restore&amp;quot;] = RestoreCommand.Run,
        [&amp;quot;restore-projectjson&amp;quot;] = RestoreProjectJsonCommand.Run,
        [&amp;quot;run&amp;quot;] = RunCommand.Run,
        [&amp;quot;sln&amp;quot;] = SlnCommand.Run,
        [&amp;quot;test&amp;quot;] = TestCommand.Run,
        [&amp;quot;vstest&amp;quot;] = VSTestCommand.Run,
    };

...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;However, if you tried using Entity Framework Core CLI, you know that it is managed using the &lt;a href=&#34;https://docs.microsoft.com/en-us/ef/core/miscellaneous/cli/dotnet&#34;&gt;&lt;code&gt;dotnet ef&lt;/code&gt;&lt;/a&gt; command installed with a &lt;a href=&#34;https://www.nuget.org/packages/Microsoft.EntityFrameworkCore.Tools/1.1.0-preview4-final&#34;&gt;separate NuGet package&lt;/a&gt;. And there is definitely no &amp;ldquo;ef&amp;rdquo; in the list of built-in commands above. How does this actually work? What happens when we execute &lt;code&gt;dotnet COMMANDNAME&lt;/code&gt;?&lt;/p&gt;

&lt;p&gt;The answer is again in the source code, same &lt;em&gt;Program.cs&lt;/em&gt; file:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;int exitCode;
Func&amp;lt;string[], int&amp;gt; builtIn;
if (s_builtIns.TryGetValue(command, out builtIn))
{
    exitCode = builtIn(appArgs.ToArray());
}
else
{
    CommandResult result = Command.Create(
            &amp;quot;dotnet-&amp;quot; + command,
            appArgs,
            FrameworkConstants.CommonFrameworks.NetStandardApp15)
        .Execute();
    exitCode = result.ExitCode;
}

return exitCode;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So &lt;em&gt;dotnet.exe&lt;/em&gt; will look for &lt;code&gt;COMMANDNAME&lt;/code&gt; in the predefined list, and if it isn&amp;rsquo;t found, will try to run an executable with the filename &lt;code&gt;dotnet-COMMANDNAME&lt;/code&gt;, passing down the rest of the original arguments to it. This only works if a file &lt;em&gt;dotnet-COMMANDNAME.exe&lt;/em&gt; can be found in at least one of the places from the PATH variable.&lt;/p&gt;

&lt;p&gt;In fact, this is &lt;em&gt;almost&lt;/em&gt; true: it actually doesn&amp;rsquo;t have to be an *.exe file, as you can see in the snippet above. Anything that is on PATH, can be executed and has the name &lt;code&gt;dotnet-COMMANDNAME&lt;/code&gt; will do. Which opens some creative possibilities&amp;hellip;&lt;/p&gt;

&lt;h3 id=&#34;batch-file&#34;&gt;Batch file&lt;/h3&gt;

&lt;p&gt;Let&amp;rsquo;s start from the simplest example. I created a batch file &lt;em&gt;dotnet-hi.bat&lt;/em&gt; in &lt;em&gt;C:\tools\go\bin&lt;/em&gt; (which happens to be in my computer&amp;rsquo;s PATH) with the following content:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@echo off
echo Hi there!
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And now I can do &lt;code&gt;dotnet hi&lt;/code&gt; from anywhere:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; dotnet hi
Hi there!
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ok, it works, but not soo exciting. Let&amp;rsquo;s add some interaction and create the following &lt;code&gt;dotnet-flickr.bat&lt;/code&gt; file:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@echo off
set &amp;quot;url=https://www.flickr.com/photos/tags/%1&amp;quot;
start %url%
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, when you are feeling sad, just run &lt;code&gt;dotnet flickr cats&lt;/code&gt; and be happy!&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://surfingthecode.com/images/dotnet-flickr-cats.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;We can also do something at least remotely useful, for example, create a &lt;code&gt;dotnet-code.bat&lt;/code&gt;, which will start Visual Studio Code in the current directory:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@echo off
code .
&lt;/code&gt;&lt;/pre&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://surfingthecode.com/images/dotnet-code.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;h3 id=&#34;dotnet-rocks&#34;&gt;dotnet rocks!&lt;/h3&gt;

&lt;p&gt;You can only do much with scripting, so there will be a point when a full-blown executable makes more sense. Plus, so far the commands have been still pretty simple and boring. And since I am a big fan of &lt;a href=&#34;https://www.dotnetrocks.com/&#34;&gt;.NET Rocks!&lt;/a&gt; show, I decided to pay a tribute to Carl and Richard: the greatest podcast about .NET absolutely deserves its own &lt;code&gt;dotnet&lt;/code&gt; command.&lt;/p&gt;

&lt;p&gt;So let me introduce you to &lt;code&gt;dotnet rocks&lt;/code&gt;!&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; dotnet rocks
Pick one of 10 last episodes on .NET Rocks! to play:
 -16 Feb 2017: Fusion Power Update Geek Out
 -15 Feb 2017: Virtual, Augmented and Mixed Realities with Jessica Engstrom
 -14 Feb 2017: Machine Learning Panel at NDC London
 -09 Feb 2017: Ops and Operability with Dan North
 -08 Feb 2017: Xamarin MVVM apps with Gill Cleeren
 -07 Feb 2017: Chatbots with Galiya Warrier
 -02 Feb 2017: IdentityServer4 with Brock Allen and Dominick Baier
 -01 Feb 2017: Data and Docker with Stephanie Locke
 -31 Jan 2017: Nodatime, Google Cloud and More with Jon Skeet
 -26 Jan 2017: Punishment Driven Development with Louise Elliott
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;(Disclaimer: only freely available data is used here and I am not affiliated with .NET Rocks!, although I can&amp;rsquo;t recommend it enough! When asked for permission to use &amp;ldquo;dotnet rocks&amp;rdquo; as the tool name, Carl and Richard kindly allowed me to &amp;ldquo;&lt;em&gt;go for it&lt;/em&gt;&amp;rdquo;.)&lt;/p&gt;

&lt;p&gt;The tool itself is very simple: it is built as a .NET Core console app, which will display a menu of N (10 by default) last episodes from .NET Rocks! and allow to pick one. Once selected, the URL of episode&amp;rsquo;s MP3 file will be opened by the default OS program (most likely - will open in your default browser and start playing). The source code is on &lt;a href=&#34;https://github.com/atsvetkov/dotnet-rocks&#34;&gt;https://github.com/atsvetkov/dotnet-rocks&lt;/a&gt; and the packaged version is available in a NuGet format at &lt;a href=&#34;https://www.nuget.org/packages/dotnet-rocks&#34;&gt;https://www.nuget.org/packages/dotnet-rocks&lt;/a&gt;. This last one is actually important: having an executable &lt;em&gt;somewhere on your PATH&lt;/em&gt; is not exactly the most robust way of installing .NET CLI extensions, so there is a better option: &lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/articles/core/preview3/tools/extensibility&#34;&gt;adding it as a .NET CLI tool reference to a project file&lt;/a&gt;. So, since it is already on &lt;a href=&#34;http://nuget.org&#34;&gt;nuget.org&lt;/a&gt;, you can just create a new .NET Core app and add a tool reference to &amp;ldquo;dotnet-rocks&amp;rdquo; in a .csproj file:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;ItemGroup&amp;gt;
    &amp;lt;DotNetCliToolReference Include=&amp;quot;dotnet-rocks&amp;quot; Version=&amp;quot;0.0.1&amp;quot; /&amp;gt;
&amp;lt;/ItemGroup&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then, after performing &lt;code&gt;dotnet restore&lt;/code&gt;, you should be able to run &lt;code&gt;dotnet rocks&lt;/code&gt; in this project&amp;rsquo;s folder. This time there is no executable with the name &lt;em&gt;dotnet-rocks&lt;/em&gt; anywhere on the PATH, but there is a package folder with &lt;em&gt;dotnet-rocks.dll&lt;/em&gt; in the system-wide NuGet packages directory, which will also be probed by .NET CLI.&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://surfingthecode.com/images/dotnet-rocks-package.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;This way of installing custom extensions seems much cleaner and more under control than scripts with magic names residing in unpredictable corners of the filesystem. And now your dream of checking out the latest .NET Rocks episodes from the command-line has finally come true! OK, maybe it wasn&amp;rsquo;t anyone&amp;rsquo;s dream, but I just felt it had to be done.&lt;/p&gt;

&lt;h3 id=&#34;summary&#34;&gt;Summary&lt;/h3&gt;

&lt;p&gt;Hopefully this post demonstrates what kind of funny and not completely useless things can be done using the .NET CLI extension mechanism. I see this as yet another way of building the convenience tools for making your dev team&amp;rsquo;s life easier. The probing logic in &lt;em&gt;dotnet.exe&lt;/em&gt; is flexible enough to allow hooking up tools or scripts from different places, so go ahead and come up with your own &lt;code&gt;dotnet something-cool&lt;/code&gt; extension!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>coffee and links 5</title>
      <link>https://surfingthecode.com/2017/02/coffee-and-links-5/</link>
      <pubDate>Thu, 16 Feb 2017 18:11:53 +0100</pubDate>
      
      <guid>https://surfingthecode.com/2017/02/coffee-and-links-5/</guid>
      <description>

&lt;p&gt;It&amp;rsquo;s time for a new coffee and some new links! This time it is mostly about .NET, since there are important news and updates.&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://surfingthecode.com/images/coffee-and-links-5.jpg&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;h3 id=&#34;15-years-of-net&#34;&gt;15 years of .NET&lt;/h3&gt;

&lt;p&gt;Just three days ago &lt;a href=&#34;https://blogs.msdn.microsoft.com/dotnet/2017/02/13/happy-15th-birthday-net/&#34;&gt;.NET got 15 years old&lt;/a&gt;! It is almost unbeliveable. I started my software development career somewhere in 2005, when I joined a small outsourcing company in St. Petersbug. I had zero knowledge of C# and ASP.NET (we were using .NET 1.1 back then and could only dream about generics), so most likely I was producing the most horrible code ever written&amp;hellip; But I was a quick learner too, so after these 12 years the code I write has hopefully become slightly less awful. Today&amp;rsquo;s .NET Framework is a very different place to be in, especially because of the open-source ecosystem around it, so I&amp;rsquo;m happier than ever that I chose this way.&lt;/p&gt;

&lt;h3 id=&#34;20-years-of-visual-studio&#34;&gt;20 years of Visual Studio&lt;/h3&gt;

&lt;p&gt;Yes, Visual Studio obvsiouly is even older than .NET, and it&amp;rsquo;s getting 20 years old in just a couple of weeks. And this will be the moment when we can finally use an RTM version of Visual Studio 2017. Even the first available beta version was great: lightweight, with a quicker installer, a cleaner configuration and a smaller footprint. After all the RCs we have tried, after all these endless conversions between new JSON project file and the new/old/whatever csproj format, &lt;a href=&#34;https://launch.visualstudio.com/&#34;&gt;the final release is coming on March 7&lt;/a&gt;! Save the date and prepare to get a never failing and ridiculously fast IDE of your dreams (am I too optimistic?).&lt;/p&gt;

&lt;p&gt;As a peek into history, read &lt;a href=&#34;http://windowsitpro.com/visual-studio/visual-studio-97&#34;&gt;a review of the very first Visual Studio from 1997&lt;/a&gt;: VC++5, VB5, and (omg!) Visual SourceSafe&amp;hellip; Not that I was programming at this time yet, but still managed to get my share of dreaful experience with this source control monster.&lt;/p&gt;

&lt;h3 id=&#34;update-on-net-core-2-0-release-dates&#34;&gt;Update on .NET Core 2.0 release dates&lt;/h3&gt;

&lt;p&gt;These were all the good news. We were expecting .NET Core 2.0 and .NET Standard 2.0 to be finalized by the same date when VS 2017 would be released. But this week &lt;a href=&#34;https://github.com/dotnet/core/blob/master/roadmap.md&#34;&gt;the new release dates were announced&lt;/a&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;.NET Core 2.0 Preview: Q2 2017&lt;/li&gt;
&lt;li&gt;.NET Core 2.0: Q3 2017&lt;/li&gt;
&lt;li&gt;.NET Standard 2.0: Q3 2017&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;     .-&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;-.
   .&#39;          &#39;.
  /   O      O   \
 :           `    :
 |                |
 :    .------.    :
  \  &#39;        &#39;  /
   &#39;.          .&#39;
     &#39;-......-&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So you still have plenty of time to try to understand &lt;a href=&#34;https://andrewlock.net/understanding-net-core-netstandard-and-asp-net-core/&#34;&gt;what .NET Standard is&lt;/a&gt;, to read about &lt;a href=&#34;https://github.com/dotnet/standard/blob/master/docs/history/evolution-of-design-time-assemblies.md&#34;&gt;different types of assemblies in .NET Standard&lt;/a&gt; and to play with the &lt;a href=&#34;https://blogs.msdn.microsoft.com/dotnet/2017/02/07/announcing-net-core-tools-updates-in-vs-2017-rc/&#34;&gt;latest update of Visual Studio 2017 RC and (&lt;em&gt;now try to read slowly and carefully&lt;/em&gt;) .NET Core 1.0 SDK RC4&lt;/a&gt; (yeah, apparently naming of pre-release versions is even harder than naming your classes).&lt;/p&gt;

&lt;h3 id=&#34;ndc-london-2017-conference-videos-available&#34;&gt;NDC London 2017 conference videos available&lt;/h3&gt;

&lt;p&gt;OK, I lied, these were not &lt;em&gt;all&lt;/em&gt; the good news. I am happy to announce that several recorded videos of NDC London 2017 talks are &lt;a href=&#34;https://vimeo.com/channels/1203692&#34;&gt;already available on vimeo&lt;/a&gt; and hopefully they will be adding even more soon. If you are wondering what this NDC is all about, read my impressions about &lt;a href=&#34;https://surfingthecode.com/2017/01/ndc-london-asp.net-core-workshop/&#34;&gt;pre-conference workshops&lt;/a&gt; and &lt;a href=&#34;https://surfingthecode.com/2017/01/ndc-london-talks/&#34;&gt;three days of great talks&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Are you still here? Just go and learn about &lt;a href=&#34;https://vimeo.com/204078084&#34;&gt;ASP.NET Sockets (a new incarnation of SignalR)&lt;/a&gt;, &lt;a href=&#34;https://vimeo.com/204141878&#34;&gt;a redesigned and rewritten for ASP.NET Core IdentityServer 4&lt;/a&gt;, or &lt;a href=&#34;https://vimeo.com/204075759&#34;&gt;what the reasons behind some design choices of C# were&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Static site deployment options</title>
      <link>https://surfingthecode.com/2017/02/static-site-deployment-options/</link>
      <pubDate>Sat, 04 Feb 2017 15:59:26 +0100</pubDate>
      
      <guid>https://surfingthecode.com/2017/02/static-site-deployment-options/</guid>
      <description>

&lt;h3 id=&#34;introduction&#34;&gt;Introduction&lt;/h3&gt;

&lt;p&gt;I know that for a lot of people their blog is something that should &lt;em&gt;just work&lt;/em&gt;. So they go for WordPress and focus on writing, especially when a blog happens to be a major source of income. Well, mine has zero commercial value and I also enjoy being a web developer, so I keep using the blog as a guinea pig for new ideas.&lt;/p&gt;

&lt;p&gt;When I first set everything up, the publishing pipeline looked like this:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;a new post is pushed to the &lt;a href=&#34;https://github.com/atsvetkov/tsvetkov.io&#34;&gt;github repo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://travis-ci.org&#34;&gt;Travis CI&lt;/a&gt; is notified and triggers a build (luckily, this service is free for open-source projects, meaning - for everything that is public on github).&lt;/li&gt;
&lt;li&gt;The build, well, builds the static site using &lt;a href=&#34;https://gohugo.io/&#34;&gt;Hugo&lt;/a&gt; CLI tool and then deploys it to a folder on a &lt;a href=&#34;digitalocean.com&#34;&gt;DigitalOcean&lt;/a&gt; server (a simple Ubuntu instance) via SSH and using &lt;code&gt;git push&lt;/code&gt; to a remote on this server.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://caddyserver.com/&#34;&gt;Caddy&lt;/a&gt;, my favourite little web server, serves the new content.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;It all worked well until it didn&amp;rsquo;t. At some point Travis CI builds would not trigger for way too long, then they would fail because the latest version of Hugo didn&amp;rsquo;t work with my site sources, then it just would succeed without actually copying files or giving an error. So I got fed up and decided to explore different options. Potentially I also want to stop using my own server altogether, since there are free solutions for static site hosting at GutHub, GitLab and many others.&lt;/p&gt;

&lt;p&gt;Don&amp;rsquo;t expect a finished story, it is an ongoing process of improving the way this blog is deployed.&lt;/p&gt;

&lt;h3 id=&#34;automated-deployment-from-my-own-machine&#34;&gt;Automated deployment from my own machine&lt;/h3&gt;

&lt;p&gt;First, I just decided to stop depending on Travis CI. As much as I like the idea of &lt;em&gt;continuous integration as a service&lt;/em&gt;, being on a free tier often means using shared infrastructure and therefore having a higher level of uncertainty as to when the builds are actually triggered. So step one for me was to be able to deploy the blog to DigitalOcean in one command from my machine.&lt;/p&gt;

&lt;p&gt;Ok, that can be done in many ways, and I have chosen the following:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;open an SSH session to a server at DigitalOcean&lt;/li&gt;
&lt;li&gt;run a bash script remotely, which will clone my git repo (and a slightly customized blog theme), run &lt;code&gt;hugo&lt;/code&gt; on the server and copy the compiled static site to the web server content folder.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;So, a &lt;code&gt;deploy.bat&lt;/code&gt; executes a &lt;code&gt;remote.sh&lt;/code&gt; script in a git shell:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;quot;C:\Program Files\Git\bin\sh.exe&amp;quot; remote.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This &lt;code&gt;remote.sh&lt;/code&gt; script simply sends the contents of the actual &lt;code&gt;deploy.sh&lt;/code&gt; script as an input to a &lt;code&gt;bash&lt;/code&gt; shell opened in an SSH session (this may look crazy for Windows people like me, but seems to be a well-known pattern in the Linux world):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cat deploy.sh | ssh root@tsvetkov.io &#39;bash -&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finally, &lt;code&gt;deploy.sh&lt;/code&gt; script will clone the repo and do the rest (this is already being executed on the remote machine):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git clone https://github.com/atsvetkov/tsvetkov.io.git /var/www/tsvetkov.io/temp
mkdir /var/www/tsvetkov.io/temp/themes
git clone https://github.com/atsvetkov/hyde.git /var/www/tsvetkov.io/temp/themes/hyde
~/work/bin/hugo -s /var/www/tsvetkov.io/temp -d /var/www/tsvetkov.io/html
rm -rf /var/www/tsvetkov.io/temp
echo done!
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Took me a Friday evening to configure, but now I can deploy the blog to the current hosting server with a single &lt;code&gt;deploy.bat&lt;/code&gt;. But what if I want to migrate from a personal server to some completely free hosting? Let&amp;rsquo;s see some alternatives.&lt;/p&gt;

&lt;h3 id=&#34;gitlab-pages&#34;&gt;GitLab Pages&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://docs.gitlab.com/ee/user/project/pages/index.html&#34;&gt;GitLab Pages&lt;/a&gt; supports hosting static sites built from a repository at GitLab. To achieve that, one would have to configure a &lt;a href=&#34;https://docs.gitlab.com/ee/ci/pipelines.html&#34;&gt;pipeline&lt;/a&gt;, which defines the steps to run during the build (usually triggered by a commit). GitLab actually makes it very easy to start by having several starter projects for various static site engines. Obviously, I just forked the &lt;a href=&#34;https://docs.gitlab.com/ee/ci/pipelines.html&#34;&gt;Hugo website example&lt;/a&gt; and configured the build pipeline in a &lt;code&gt;.gitlab-ci.yml&lt;/code&gt; file in my repo. GitLab pipelines infrastructure seems to run on Docker containers, so this file defines the base image and the build actions:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;image: alpine:3.4

before_script:
  - apk update &amp;amp;&amp;amp; apk add openssl
  - wget https://github.com/spf13/hugo/releases/download/v0.16/hugo_0.16_linux-64bit.tgz
  - echo &amp;quot;37ee91ab3469afbf7602a091d466dfa5  hugo_0.16_linux-64bit.tgz&amp;quot; | md5sum -c
  - tar xf hugo_0.16_linux-64bit.tgz &amp;amp;&amp;amp; cp ./hugo /usr/bin
  - hugo version

pages:
  script:
  - hugo
  artifacts:
    paths:
    - public
  only:
  - master
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Basically, you can read this as &amp;ldquo;using &lt;code&gt;alpine&lt;/code&gt; image, install OpenSSL and Hugo to my container and then build the site into &lt;code&gt;public&lt;/code&gt; folder&amp;rdquo;. Easy-peasy, and will result in an updated site at &lt;a href=&#34;https://PROJECT_NAME.gitlab.io&#34;&gt;https://PROJECT_NAME.gitlab.io&lt;/a&gt;. Custom domains are supported too, so right now this version of my blog is running at &lt;a href=&#34;https://alexandertsvetkov.me:&#34;&gt;https://alexandertsvetkov.me:&lt;/a&gt;&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://surfingthecode.com/images/gitlab_pages_blog.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;h3 id=&#34;github-pages&#34;&gt;GitHub pages&lt;/h3&gt;

&lt;p&gt;OK, this is all well and good, but the sources of my blog are actually stored on GitHub and keeping the version at GitLab in sync with the original one is not something I really want to be doing. Maybe I can actually use &lt;a href=&#34;https://pages.github.com/&#34;&gt;GitHub Pages&lt;/a&gt; directly?&lt;/p&gt;

&lt;p&gt;Of course, I can! One of the way it is supported at GitHub Pages is the following:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;A repository should have a special branch named &lt;code&gt;gh-pages&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;When project is configured to use Pages and something is pushed to this branch, it will treat the files as a root folder of the site and serve them under some project-specific URL (once again, custom domain domains and HTTPS are supported)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;A &lt;code&gt;deploy-to-gh-pages.bat&lt;/code&gt; script to the rescue:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;hugo --config config.gh-pages.toml
git add public
git commit -m &amp;quot;updated published static site&amp;quot;
git push
git subtree push --prefix public origin gh-pages
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In this case Hugo will compile the site using a separate config file, since the base URL of the site has to be different (just until a domain name is remapped). Then the compiled static site is pushed from &lt;code&gt;public&lt;/code&gt; subfolder to the &lt;code&gt;gh-pages&lt;/code&gt; branch - and it automagically appears on the web under &lt;a href=&#34;https://USER_NAME.github.io/REPO_NAME!&#34;&gt;https://USER_NAME.github.io/REPO_NAME!&lt;/a&gt;&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://surfingthecode.com/images/github_pages_blog.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;h3 id=&#34;gh-pages-npm-tool&#34;&gt;gh-pages npm tool&lt;/h3&gt;

&lt;p&gt;Turns out this is a very common scenario, so there are tools to do all of this special branching stuff automatically. Specifically, &lt;a href=&#34;https://www.npmjs.com/package/gh-pages&#34;&gt;&lt;code&gt;gh-pages&lt;/code&gt;&lt;/a&gt; CLI tool is available in NPM repository, allowing to push to &lt;code&gt;gh-pages&lt;/code&gt; branch from a git repo folder. After installing it with &lt;code&gt;npm install gh-pages --save-dev&lt;/code&gt; (and doing &lt;code&gt;npm init&lt;/code&gt; before that, since my blog wasn&amp;rsquo;t originally configured to work with Node), I was able to deploy the site to GitHub pages with a single &lt;code&gt;gh-pages -d public&lt;/code&gt; node command.&lt;/p&gt;

&lt;p&gt;And to make it truly &lt;em&gt;npm-style&lt;/em&gt;, we can configure a task in &lt;code&gt;package.json&lt;/code&gt; like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;quot;scripts&amp;quot;: {
    &amp;quot;deploy&amp;quot;: &amp;quot;gh-pages -d public&amp;quot;
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Which now allows to deploy from command line with &lt;code&gt;npm run deploy&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#34;even-cooler-tools&#34;&gt;Even cooler tools&lt;/h3&gt;

&lt;p&gt;From all of the above you can see that I really like to do the deployment from command line (like all other tasks, in fact). And I am definitely not alone in that, since there are plenty of services with CLI tools for the same one-command deployments to their hosting. They seem to target exactly this kind of software developers, who prefer command line to mouse clicking, and provide a super simple convention-based experience instead.&lt;/p&gt;

&lt;p&gt;One of them, &lt;a href=&#34;https://surge.sh/&#34;&gt;Surge&lt;/a&gt;, can be installed with just &lt;code&gt;npm install --global surge&lt;/code&gt;, and then you can literally deploy with one &lt;code&gt;surge&lt;/code&gt; command from a project folder. It will upload the files and expose the site under a generated URL:&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://surfingthecode.com/images/surge_blog_cli.png&#34; /&gt;
    
    
&lt;/figure&gt;



&lt;figure &gt;
    
        &lt;img src=&#34;https://surfingthecode.com/images/surge_blog.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;(Obviously, I need to look into why my tiny blog is 19 MB in size, but that is a story for another time.)&lt;/p&gt;

&lt;p&gt;Other interesting tool/hosting combinations include &lt;a href=&#34;https://zeit.co/now&#34;&gt;now&lt;/a&gt; and &lt;a href=&#34;https://static.land/&#34;&gt;staticland&lt;/a&gt;, while &lt;a href=&#34;https://www.netlify.com&#34;&gt;Netlify&lt;/a&gt; is more like a replacement for GitHub Pages, providing CI on top of your repository, hosting and even CDN.&lt;/p&gt;

&lt;h3 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;It is absolutely a golden era of tech blogging. There is a huge choice of tools for authoring, deploying and hosting. Some are very developer-oriented, making them very attractive and easy to use.&lt;/p&gt;

&lt;p&gt;Stay tuned to see where this blog ends up being hosted! And now I&amp;rsquo;m just going to run &lt;code&gt;deploy.bat&lt;/code&gt; and relax.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>NDC London: talks</title>
      <link>https://surfingthecode.com/2017/01/ndc-london-talks/</link>
      <pubDate>Sat, 28 Jan 2017 11:54:46 +0100</pubDate>
      
      <guid>https://surfingthecode.com/2017/01/ndc-london-talks/</guid>
      <description>

&lt;p&gt;Last three days of NDC London presented a constant paradox of choice, since every hour 7-8 speakers would have parallel sessions in different rooms. How the hell am I supposed to pick only one, if all of them are great? How on earth can you choose between Jon Skeet and Mark Seeman? My way of solving this problem was to spend an hour every evening going through the list of the next day&amp;rsquo;s speakers and googling their talks from the past. Sometimes this helped me to pick a brilliant talk from someone I had not known yet, sometimes this meant I would go to the Bill Wagner&amp;rsquo;s talk and&amp;hellip; well, more on that later.&lt;/p&gt;

&lt;p&gt;Being an old-school geek, I still prefer to make notes on paper, so I have pretty good coverage of what I learned during these talks. Hopefully all the recorded sessions will be available on the web soon (that&amp;rsquo;s the part I really like about NDC), but before this happens, here&amp;rsquo;s a list of my observations and learnings from the talks I personally attended.&lt;/p&gt;

&lt;h3 id=&#34;day-1&#34;&gt;Day 1&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;In the keynote Richard Campbell was talking about the &lt;a href=&#34;http://www.htbox.org/&#34;&gt;Humanitarian Toolbox&lt;/a&gt;, an open-source project for helping non-commercial organizations like Red Cross, and invited everyone to join. I&amp;rsquo;m really considering that, since there is a noble purpose and pretty nice technology stack too.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Ian Cooper told us about &lt;a href=&#34;https://12factor.net/&#34;&gt;The Twelve-Factor Apps&lt;/a&gt;, but on a really high level, so I didn&amp;rsquo;t learn anything practical.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Async/await in C# is still not well-understood by many developers, so &lt;a href=&#34;http://www.filipekberg.se/&#34;&gt;Filip Ekberg&lt;/a&gt; talked about the actual compiler logic behind this pattern and listed some gotchas. For example, you should never block on async code (&lt;a href=&#34;http://blog.stephencleary.com/2012/07/dont-block-on-async-code.html&#34;&gt;here is why&lt;/a&gt;) and it&amp;rsquo;s better to avoid too many nested async method calls, because a compiler will create and instantiate a genereated state-machine class for each one, so there is some overhead.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Dominick Baier and Brock Allen explained the differences between the recently released IdentityServer4 and widely-used IdensityServer3. It targets .NET Core, which means they don&amp;rsquo;t have their own built-in DI and can rely on ASP.NET Core dependency resolution instead. &lt;em&gt;Scopes&lt;/em&gt; were renamed to &lt;em&gt;ApiResources&lt;/em&gt; and &lt;em&gt;IdentityResources&lt;/em&gt;, since the concept of scopes wasn&amp;rsquo;t obvious to people and usually would be explained like &amp;ldquo;think of them as &lt;em&gt;resources&lt;/em&gt; to protect access to&amp;rdquo;. Login UI is not included anymore, but there is a &lt;a href=&#34;https://github.com/IdentityServer/IdentityServer4.Quickstart.UI&#34;&gt;quickstart project&lt;/a&gt; to use as an example when building your own. Also, there is now a built-in temporary generated certificate, which makes the development-time configuration very easy.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Scott Allen shared some of his experience with modern JavaScript, pointing out that many patterns we were used to (like &lt;a href=&#34;https://en.wikipedia.org/wiki/Immediately-invoked_function_expression&#34;&gt;IIFE&lt;/a&gt; or &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode&#34;&gt;&amp;ldquo;use strict&amp;rdquo;&lt;/a&gt;) are quickly becoming obsolete, while tools like &lt;a href=&#34;https://webpack.github.io/&#34;&gt;Webpack&lt;/a&gt; and &lt;a href=&#34;https://babeljs.io/&#34;&gt;Babel&lt;/a&gt; are developer&amp;rsquo;s best friends when working with the latest and experimental JS features across different browsers.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;day-2&#34;&gt;Day 2&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://aurelia.ninja/&#34;&gt;Ashley Grant&lt;/a&gt; gave a more or less typical &lt;a href=&#34;http://aurelia.io/&#34;&gt;Aurelia&lt;/a&gt; talk with standard demo (side note: did you know that &lt;a href=&#34;http://wiki.c2.com/?KebabCase&#34;&gt;this-is-called-kebab-case&lt;/a&gt;?), except for the last part, where he showed hot module reloading and server-side rendering support implemented just the day before and not released yet. He also mentioned some of their future plans, including Webpack support and an ongoing work on &lt;a href=&#34;http://eisenbergeffect.bluespire.com/aurelia-interface-update/&#34;&gt;UI controls&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Most people know &lt;a href=&#34;http://blog.ploeh.dk/&#34;&gt;Mark Seemann&lt;/a&gt; as the author of a &lt;a href=&#34;https://www.manning.com/books/dependency-injection-in-dot-net&#34;&gt;Dependency Injection in .NET&lt;/a&gt; book, but since then he moved into the mysterious land of the functional programming. His talk actually combined both worlds, with a very simple question as the main theme: how do you properly implement dependency injection in functional languages? Using examples from C#, F# and Haskell, going through &lt;a href=&#34;https://en.wikipedia.org/wiki/Pure_function&#34;&gt;pure functions&lt;/a&gt; and &lt;a href=&#34;http://blog.ploeh.dk/2016/03/18/functional-architecture-is-ports-and-adapters/&#34;&gt;ports and adapters architecture&lt;/a&gt;, he demonstrated that the answer is not &lt;em&gt;partial application&lt;/em&gt; (because it is not functional at heart), but &lt;em&gt;composition of functions&lt;/em&gt; instead. Very enlightening.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;The all time top StackOverflow guru &lt;a href=&#34;http://stackoverflow.com/users/22656/jon-skeet&#34;&gt;Jon Skeet&lt;/a&gt; gave an entertaining talk called &amp;ldquo;Abusing C# More&amp;rdquo; and, oh boy, yes he can! He easily tricked the audience &lt;em&gt;and&lt;/em&gt; the compiler with the invisible &lt;a href=&#34;https://codeblog.jonskeet.uk/2014/12/01/when-is-an-identifier-not-an-identifier-attack-of-the-mongolian-vowel-separator/&#34;&gt;mongolian vowel separator&lt;/a&gt;, totally abused the deconstruction feature of C# 7.0, played with operator overloading for IEnumerable (imagine you could use &amp;ldquo;+&amp;rdquo;, &amp;ldquo;-&amp;rdquo; etc. with collections) and did all other kinds of nasty and mostly useless magic which blew my mind. The code examples are available in a &lt;a href=&#34;https://github.com/jskeet/DemoCode&#34;&gt;github repo&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://schneids.net/&#34;&gt;Spencer Schneiderbach&lt;/a&gt; listed the best practices for building REST APIs. Some thoughts were opinionated, others were common sense, but overall it was a good overview, I think. And yes, he recommends using &lt;a href=&#34;https://github.com/jbogard/MediatR&#34;&gt;MediatR&lt;/a&gt;, so thumbs up.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;One day I will write a post about something which, for lack of a better name, I call &lt;em&gt;a virtual apprenticeship&lt;/em&gt;. For me the most effective learning model these days is to find someone in the industry who I understand and trust, and then follow closely everything they do (I think this very much resembles how people did it last several thousand years, learning from masters by following their example). For me one of these guys is &lt;a href=&#34;https://lostechies.com/jimmybogard/&#34;&gt;Jimmy Bogard&lt;/a&gt;, the autor of AutoMapper and MediatR. Not only I like the tools, but I also always enjoy watching his talks, because usually they &lt;em&gt;click&lt;/em&gt; with my way of thinking about software development. So, going to his talk about microservices was a no-brainer. It was a funny story about his team&amp;rsquo;s experience migrating a legacy web system at a fictional company &lt;em&gt;Bell Computers&lt;/em&gt; (ha-ha) to a microservices architecture. There were smart technical decisions and also many organizational quirks and impediments, which resulted in talking about the &lt;em&gt;Inverse Conway Maneuver&lt;/em&gt; and Jimmy&amp;rsquo;s own extension of Conway&amp;rsquo;s Law.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://surfingthecode.com/images/jimmys_law.jpg&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://blogs.microsoft.co.il/sasha/&#34;&gt;Sasha Goldshtein&lt;/a&gt; threw a lot of low-level technical details about utilizing modern CPU features to improve performance of .NET applications. A famous example of speed comparison when processing a sorted vs unsorted array shows that CPU branch prediction matters and can influence your programs, &lt;a href=&#34;https://en.wikipedia.org/wiki/SIMD&#34;&gt;SIMD&lt;/a&gt; and vector-based operations allow to do more computational work in the same amount of CPU cycles (and, by the way, .NET Framework 4.6 has &lt;a href=&#34;https://msdn.microsoft.com/en-us/library/dn879696&#34;&gt;built-in classes with SIMD support&lt;/a&gt;).&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;The day ended in the most perfect way possible: I attended a live recording of .NET Rocks show! It was a panel discussion about machine learning with Evelina Gabasova, Barbara Fusinska and Jennifer Marsman, which showed that women in technology are super cool and incredibly smart. And it goes without saying that watching Carl and Richard actually do their magic on stage was just beyond awesome.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;day-3&#34;&gt;Day 3&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;A talk about dockerizing ASP.NET applications happened to be one of the most productive in terms of demos and inspiration. &lt;a href=&#34;https://blog.sixeyed.com/&#34;&gt;Elton Stoneman&lt;/a&gt; showed a very basic ASP.NET WebForms (!!!) app and then step by step containerized it into a fully distributed set of nicely decoupled microservices, all in one hour! I was very impressed by the quality of the examples, everything looked practical, polished, and ready-to-use. I wish all speakers prepared like this.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;One of those talks I chose by googling the day before, &lt;a href=&#34;http://simonbrown.je/&#34;&gt;Simon Brown&amp;rsquo;s&lt;/a&gt; approach to visualizing software architecture is no-nonsense, to the point and flexible. His own &lt;em&gt;C4&lt;/em&gt; model stands for &lt;em&gt;Context, Containers, Components, Classes&lt;/em&gt;, which are essentially the four different zoom levels when looking down on the architecture (he uses the &amp;ldquo;diagrams as maps&amp;rdquo; metaphor all the time). Of course, he has a &lt;a href=&#34;https://leanpub.com/b/software-architecture&#34;&gt;book&lt;/a&gt; and a &lt;a href=&#34;https://structurizr.com/&#34;&gt;SaaS architecture visualization software&lt;/a&gt; to support this approach. I also liked his idea of how the software documentation should look like: not a hundred page outdated monstrocity, but a &lt;em&gt;software guidebook&lt;/em&gt; instead, containing the explanation of how it works, without too many implementation details and possible to read in 1-2 hours maximum.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;I had had high expectations about Bill Wagner&amp;rsquo;s presentation on C# 7.0 pattern matching, but it ended up being one of the most disappointing talks. One third of the time was spent on generic Microsoft open-source roadmap explanation, the second, on struggling with a recent build of Visual Studio 2017, the rest - writing some very, very basic sample code, which didn&amp;rsquo;t go further than anything you can google and try yourself in 5 minutes. I respect everything that Bill has done for the industry over the years, but this time it felt rough and shallow.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;When it comes to talking about Octopus Deploy, &lt;a href=&#34;https://damianbrady.com.au/&#34;&gt;Damian Brady&lt;/a&gt; is usually the guy to explain it very well. But it seems that he is gradually shifting his area of interest, so this talk was more about implementing DevOps in an organization in general. A lot of very sensible advice, like isolating variations of software, externalizing configuration, measuring in production, deploying without drama, using feature flags, and making the culture change happen. His definition of DevOps is powerful and should be every company&amp;rsquo;s motto, I think. Also, Damian was very friendly and open after the talk, when I bothered him with some Octopus-related questions.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://surfingthecode.com/images/devops_definition.jpg&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;h3 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;NDC London 2017 was just awesome; seeing all these smart people at one place gives so much inspiration and feels like being part of something bigger. I guess my budget will be suffering a lot, because I absolutely have to attend more NDC&amp;rsquo;s!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>NDC London: ASP.NET Core workshop</title>
      <link>https://surfingthecode.com/2017/01/ndc-london-asp.net-core-workshop/</link>
      <pubDate>Tue, 17 Jan 2017 21:14:23 +0100</pubDate>
      
      <guid>https://surfingthecode.com/2017/01/ndc-london-asp.net-core-workshop/</guid>
      <description>
&lt;figure &gt;
    
        &lt;img src=&#34;https://surfingthecode.com/images/ndc_london_2017_workshops.jpg&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;Apparently last year I was a good boy, because Santa has already made several of my dreams come true in 2017. This week I am visiting London and attending &lt;a href=&#34;http://ndc-london.com/&#34;&gt;NDC London&lt;/a&gt;, one of the greatest and most inspiring conferences I am aware of. Until now I only knew it by watching &lt;a href=&#34;https://vimeo.com/ndcconferences&#34;&gt;numerous recorded talks from the past&lt;/a&gt; and listetning to these top notch developers on &lt;a href=&#34;https://www.dotnetrocks.com/&#34;&gt;.NET Rocks&lt;/a&gt;. Well, this morning I was in an elevator with &lt;a href=&#34;http://odetocode.com/about/scott-allen&#34;&gt;Scott Allen&lt;/a&gt;, whose courses on PluralSight were the major part of my learning materials on ASP.NET some years ago. And when I stepped out of this elevator, first thing I heard was &amp;ldquo;Hi, I&amp;rsquo;m Richard Campbell&amp;rdquo; (that&amp;rsquo;s exactly 50% of .NET Rocks I just met). I know, it sounds silly, but I actually feel like a little boy meeting his all time football idol or somebody like that.&lt;/p&gt;

&lt;p&gt;Anyway, enough emotions.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Hell, I spent last two days on ASP.NET Core workshop with Damian Edwards, David Fowler and Jon Galloway!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Ok, &lt;em&gt;now&lt;/em&gt; I&amp;rsquo;m done with emotions. The workshop started from the very basic concepts (why .NET Core and how it is different) and gradually became more and more in-depth how-to session on various parts of .NET Core ecosystem, including hosting, configuration, tooling, logging, MVC and much more. We even found a couple of bugs in realtime (after all the VS tooling part is still RC)! Besides the sessions in a lecture format, we had a lab after each one, which were available &lt;a href=&#34;https://github.com/jongalloway/aspnetcore-workshop&#34;&gt;on github&lt;/a&gt;. This part felt more like an individual exercise with a priceless bonus of having the authors of the framework in the same room.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s hardly possible to describe all that we&amp;rsquo;ve learned there, because that was &lt;em&gt;a lot&lt;/em&gt; of information, like really &lt;em&gt;a lot&lt;/em&gt;. We were taught the differences between running .NET Core apps from Visual Studio and directly from command-line, &lt;a href=&#34;https://docs.microsoft.com/en-us/aspnet/core/fundamentals/hosting&#34;&gt;how certain environment variables influence the hosting behaviour&lt;/a&gt;, how flexible &lt;a href=&#34;https://docs.microsoft.com/en-us/aspnet/core/fundamentals/middleware&#34;&gt;middlewares&lt;/a&gt; (or middlesware?) are compared to the old HTTP modules/handlers, how to configure &lt;a href=&#34;https://docs.microsoft.com/en-us/aspnet/core/fundamentals/logging&#34;&gt;logging&lt;/a&gt; and handle errors locally and on production environment. On the second day we looked into &lt;a href=&#34;https://docs.microsoft.com/en-us/aspnet/core/mvc/views/tag-helpers/intro&#34;&gt;tag helpers&lt;/a&gt;, options for building single-page applications on .NET Core using &lt;a href=&#34;https://docs.microsoft.com/en-us/aspnet/core/client-side/yeoman&#34;&gt;Yeoman generators&lt;/a&gt; and &lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=MadsKristensen.ASPNETCoreTemplatePack&#34;&gt;ASP.NET Core Template Pack&lt;/a&gt;, how &lt;a href=&#34;https://github.com/aspnet/JavaScriptServices&#34;&gt;JavaScript Services&lt;/a&gt; enable cool modern features like hot module replacement and server-side prerendering, and at the end looked at different &lt;a href=&#34;https://docs.microsoft.com/en-us/aspnet/core/publishing/iis&#34;&gt;publishing workflows&lt;/a&gt; and experimental support of &lt;a href=&#34;https://docs.microsoft.com/en-us/azure/application-insights/app-insights-asp-net-core&#34;&gt;Application Insights&lt;/a&gt;, which is expected to be a super-easy-to-enable feature in Visual Studio 2017. It was also pretty entertaining to see the Microsoft guys ranting about certain Microsoft products and technologies, like IIS or COM, and using Chrome 90% of the time for demos. It just makes me feel better, like it&amp;rsquo;s not just me, they recognize it too.&lt;/p&gt;

&lt;p&gt;By the way, most links above point to the new &lt;a href=&#34;https://docs.microsoft.com&#34;&gt;Microsoft Docs&lt;/a&gt; site, which is a very, very cool new resource. It feels modern and way better than MSDN. Well, it has to be like that, since &lt;a href=&#34;http://eisenbergeffect.bluespire.com/joining-microsoft/&#34;&gt;Rob Eisenberg is working on it&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;It was a great experience and it certainly inspires to create and to share. Now that the pre-conference workshops are over, I&amp;rsquo;m looking forward to the next three days of talks by guys like Bill Wagner, Troy Hunt, Jon Skeet and Mark Seeman.&lt;/p&gt;

&lt;p&gt;Lifelong learning FTW!&lt;/p&gt;

&lt;p&gt;And, by the way, London is just fabulous, when it&amp;rsquo;s not raining.&lt;/p&gt;

&lt;p&gt;
&lt;figure &gt;
    
        &lt;img src=&#34;https://surfingthecode.com/images/london_evening_thames.jpg&#34; /&gt;
    
    
&lt;/figure&gt;
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>coffee and links 4</title>
      <link>https://surfingthecode.com/2017/01/coffee-and-links-4/</link>
      <pubDate>Sun, 08 Jan 2017 18:11:53 +0100</pubDate>
      
      <guid>https://surfingthecode.com/2017/01/coffee-and-links-4/</guid>
      <description>

&lt;p&gt;Happy New Year everyone and thank you for reading this blog!&lt;/p&gt;

&lt;p&gt;I decided to slightly modify the format of this series, so that the posts have only 3-5 links, but carefully selected and more focused ones. &lt;a href=&#34;https://en.wikipedia.org/wiki/Information_overload&#34;&gt;Information overload&lt;/a&gt; isn&amp;rsquo;t a joke and trying to learn everything is often counterproductive (ask me how I know it), while picking your battles and practicing &lt;a href=&#34;https://en.wikipedia.org/wiki/Slow_reading&#34;&gt;deep reading&lt;/a&gt; helps internalize things you read.&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://surfingthecode.com/images/coffee-and-links-4.jpg&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;h3 id=&#34;making-the-fastest-site-in-the-world&#34;&gt;Making the fastest site in the world&lt;/h3&gt;

&lt;p&gt;David Gilbertson wrote &lt;a href=&#34;https://hackernoon.com/10-things-i-learned-making-the-fastest-site-in-the-world-18a0e1cdf4a7#.3w8bfx9sf&#34;&gt;a fascinating and hilarious post&lt;/a&gt; about frontend optimization techniques, which you may or may not know. It&amp;rsquo;s super funny to read, but also very enlightening and touching on a lot of very modern concepts, like &lt;a href=&#34;https://preactjs.com/&#34;&gt;Preact&lt;/a&gt;, &lt;a href=&#34;https://developers.google.com/web/fundamentals/getting-started/primers/service-workers&#34;&gt;service workers&lt;/a&gt;, &lt;a href=&#34;https://www.keycdn.com/blog/resource-hints/&#34;&gt;prefetch and preload&lt;/a&gt; resource hints, using &lt;a href=&#34;https://github.com/GoogleChrome/lighthouse&#34;&gt;Lighthouse&lt;/a&gt; to measure performance metrics, and more. Highly recommended for anyone interested in &lt;a href=&#34;https://developers.google.com/web/progressive-web-apps/&#34;&gt;progressive web apps&lt;/a&gt; and web performance in general.&lt;/p&gt;

&lt;h3 id=&#34;frameworks-without-the-framework-why-didn-t-we-think-of-this-sooner&#34;&gt;Frameworks without the framework: why didn&amp;rsquo;t we think of this sooner?&lt;/h3&gt;

&lt;p&gt;These days JavaScript frameworks have become almost a standard way of developing frontend apps. We throw in multiple scripts, loaded in memory and controlling the application workflow. Basically it&amp;rsquo;s a &lt;em&gt;runtime&lt;/em&gt; executed in the browser. While this is convenient, this also means a significant overhead. Looking at the two most popular frameworks at the moment, a minified React script is 139Kb and Angular 2 is 566Kb - wow, that&amp;rsquo;s a lot for &lt;em&gt;just a framework&lt;/em&gt;. Arguably there are very few web applications using all functionality from those libraries, so it seems that quite often we could get away with much less extra weight. But Rich Harris goes even further: &lt;em&gt;&lt;a href=&#34;https://svelte.technology/blog/frameworks-without-the-framework/&#34;&gt;do we need a runtime framework at all?&lt;/a&gt;&lt;/em&gt; His answer to that is &lt;a href=&#34;https://svelte.technology/&#34;&gt;Svelte&lt;/a&gt;, a very new and perhaps still experimental project, which implements a very simple idea: let&amp;rsquo;s move the &amp;ldquo;framework&amp;rdquo; part from runtime to compile time. Svelte is essentially a build tool, allowing you to organize your application code into web components, which can then be &lt;em&gt;compiled&lt;/em&gt; into the plain HTML and JavaScript files, without any framework. It also supports templates, scoped styles and server-side rendering - everything today&amp;rsquo;s code hipsters want!&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s look at a quick example. Imagine we have a &lt;em&gt;component&lt;/em&gt; defined as an HTML file &lt;code&gt;HelloWorld.html&lt;/code&gt; with the following content:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;h1&amp;gt;Hello {{name}}&amp;lt;/h1&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then we run a compiler against this file like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;svelte compile --format iife HelloWorld.html &amp;gt; HelloWorld.js
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Which results in a new &lt;code&gt;HelloWorld.js&lt;/code&gt; file with quite some code in it:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var HelloWorld = (function () { &#39;use strict&#39;;

function renderMainFragment ( root, component ) {
    var h1 = createElement( &#39;h1&#39; );
    
    appendNode( createText( &amp;quot;Hello &amp;quot; ), h1 );
    var text1 = createText( root.name );
    appendNode( text1, h1 );

    return {
        mount: function ( target, anchor ) {
            insertNode( h1, target, anchor );
        },
        
        update: function ( changed, root ) {
            text1.data = root.name;
        },
        
        teardown: function ( detach ) {
            if ( detach ) {
                detachNode( h1 );
            }
        }
    };
}

// more code
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And this is where Svelte ends. You now have a web component, which can be referenced in a &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tag and then mounted/removed by other components. You could categorize Svelte as just a smart code generator, but this doesn&amp;rsquo;t change the facts: it solves the problem of managing a complex application code base, but without a runtime library overhead. To me this looks like a very powerful and promising concept, so I will definitely be following this project in 2017.&lt;/p&gt;

&lt;h3 id=&#34;resharper-interactive-tutorials&#34;&gt;ReSharper Interactive Tutorials&lt;/h3&gt;

&lt;p&gt;I have been using ReSharper for years and some refactorings are just a natural part of my workflow now. When I need to rename something, I press &lt;code&gt;Ctrl-R-R&lt;/code&gt; before I even think about it. When I need a new file next to the currently open one, I would start writing the code right here and then &lt;code&gt;Alt-Enter&lt;/code&gt;, &lt;code&gt;Move to &amp;lt;filename&amp;gt;.cs&lt;/code&gt;. Still I probably only use between 5% and 10% of all functionality available. JetBrains developers recognize this problem, so they came up with a cool solution: instead of reading release notes or watching videos somewhere else, why not just go through &lt;a href=&#34;(https://blog.jetbrains.com/dotnet/2016/12/22/resharper-interactive-tutorials/) without even leaving Visual Studio! These tutorials are now available as a [ReSharper extension](https://resharper-plugins.jetbrains.com/packages/JetBrains.ReSharperTutorials/) (make sure you already have the latest ReSharper 2016.3 installed). After that there will be a new &amp;quot;Tutorials&amp;quot; item in ReSharper menu, which will allow you to start one of two currently available tutorials (essentials and new features in version 2016.3&#34;&gt;an interactive tutorial&lt;/a&gt;. This will open a training solution and will guide you through several step-based exercises:&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://surfingthecode.com/images/resharper_interactive_tutorials.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;If you want to better know your favourite productivity plugin, go ahead and follow the tutorials!&lt;/p&gt;

&lt;h3 id=&#34;asp-net-webhooks&#34;&gt;ASP.NET WebHooks&lt;/h3&gt;

&lt;p&gt;Many SaaS platforms these days use the concept of &lt;a href=&#34;https://en.wikipedia.org/wiki/Webhook&#34;&gt;web hooks&lt;/a&gt;, providing a secure and managed way of integrating with your own application via HTTP. &lt;a href=&#34;https://developer.github.com/webhooks/&#34;&gt;GitHub&lt;/a&gt;, &lt;a href=&#34;https://api.slack.com/incoming-webhooks&#34;&gt;Slack&lt;/a&gt;, &lt;a href=&#34;https://stripe.com/docs/webhooks&#34;&gt;Stripe&lt;/a&gt; - all of them have some kind of web hook integration. From architectural perspective, this is nothing new: a web hook is an implementation of pub/sub pattern using HTTP-based API. So every ASP.NET Web API application can potentially expose some kind of custom controller for managing subscribers and other controllers to handle incoming requests/events. But the concept is obviously so popular, that Microsoft decided it deserves a built-in implementation.&lt;/p&gt;

&lt;p&gt;Meet &lt;a href=&#34;https://blogs.msdn.microsoft.com/webdev/2016/12/14/introducing-microsoft-asp-net-webhooks-preview-2/&#34;&gt;ASP.NET WebHooks&lt;/a&gt;, &lt;em&gt;&amp;ldquo;a simple pub/sub model for wiring together Web APIs and services with your code.&amp;rdquo;&lt;/em&gt; There are several related NuGet packages, which support both easily subscribing to a number of already existing web hook APIs out there (like the ones mentioned above) and also defining your own events which consumers can subscribe to. For example, this can very useful to quickly integrate several enterprise web applications in a loosely coupled way (pub/sub model exists for exactly this purpose), or connect an internal billing dashboard to Stripe, or allow some application behaviour to be triggered by a Slack command&amp;hellip; the possibilities seem endless.&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://surfingthecode.com/images/aspnet_webhooks_nuget_packages.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;I&amp;rsquo;m thinking about applying this for a small RSS listener app, which will send a Slack message whenever there is a new post in this blog. Surely this can be done in many other ways, but still sounds like a good exercise.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>C-Sharp 7.0 and Visual Studio 2017 RC</title>
      <link>https://surfingthecode.com/2016/12/c-sharp-7.0-and-visual-studio-2017-rc/</link>
      <pubDate>Sun, 25 Dec 2016 12:58:59 +0100</pubDate>
      
      <guid>https://surfingthecode.com/2016/12/c-sharp-7.0-and-visual-studio-2017-rc/</guid>
      <description>


&lt;figure &gt;
    
        &lt;img src=&#34;https://surfingthecode.com/images/csharp_7_visual_studio_2017_rc.jpg&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;A new Release Candidate of Visual Studio 2017 &lt;a href=&#34;https://www.visualstudio.com/en-us/news/releasenotes/vs2017-relnotes&#34;&gt;has been released recently&lt;/a&gt;, featuring faster installation and solution loading, an updated project file format, improved IntelliSense, better navigation, and some new built-in refactoring actions covering a significant part of commonly used ReSharper functionality. In this post we will look briefly into these items and will also do a small coding exercise to demonstrate some cool features of C# 7.0.&lt;/p&gt;

&lt;h3 id=&#34;installation&#34;&gt;Installation&lt;/h3&gt;

&lt;p&gt;If you want to try it out today, just go to the &lt;a href=&#34;https://www.visualstudio.com/vs/visual-studio-2017-rc/&#34;&gt;Visual Studio 2017 RC page&lt;/a&gt; and download the installer of a specific edition (I&amp;rsquo;m testing the Enterprise version). The installer itself is tiny and will download the necessary files during the installation. This is actually an important point: this version of Visual Studio has a slightly different way of configuring features, called &lt;a href=&#34;https://docs.microsoft.com/en-us/visualstudio/install/install-visual-studio#install-workloads&#34;&gt;workloads&lt;/a&gt; (a pack of related features for a certain type of development work, like web, data science etc.)&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://surfingthecode.com/images/visual-studio-workloads.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;I selected &amp;ldquo;Web development&amp;rdquo; workload only, which resulted in a much smaller footprint on the disk: the whole installation folder is now 1.5Gb size, while my current Visual Studio 2015 is occupying more than 5GB. That&amp;rsquo;s a huge win, and it also apparently contributes to the reduced VS starting time.&lt;/p&gt;

&lt;h3 id=&#34;new-project-file-format&#34;&gt;New project file format&lt;/h3&gt;

&lt;p&gt;If you were following the whole .NET Core story, you know that for the cross-platform version of the framework Microsoft came up with &lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/articles/core/tools/project-json&#34;&gt;a new JSON-based project file&lt;/a&gt;. It was a beautiful idea and a great improvement compared to the XML craziness of the old *.csproj. One the coolest parts of the &lt;code&gt;project.json&lt;/code&gt; is a unified system of project/package references and convention-based inclusion of source code files (no explicit list of individual files, like it was in the older .csproj format). These changes made the JSON project file relatively short and human-readable.&lt;/p&gt;

&lt;p&gt;But then came a realization that the old project files were part of the huge ecosystem of existing MSBuild tools, so rewriting &lt;em&gt;everything&lt;/em&gt; from XML to JSON would be an enourmous effort, not only for Microsoft itself, but also for third-party tools authors. So, long story short, &lt;code&gt;project.json&lt;/code&gt; is no more, and there is a new and improved .csproj format coming. (For a more detailed explanation and reasoning behind this change check out &lt;a href=&#34;https://www.stevejgordon.co.uk/project-json-replaced-by-csproj&#34;&gt;this Steve Gordon&amp;rsquo;s blog post&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;When you create a new project in Visual Studio 2017 RC, it is already using the &lt;em&gt;new&lt;/em&gt; .csproj (&lt;a href=&#34;https://blogs.msdn.microsoft.com/dotnet/2016/11/16/announcing-net-core-tools-msbuild-alpha/&#34;&gt;still an alpha version&lt;/a&gt; and subject to change), which looks like this:&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/atsvetkov/4b5e0efdc8612b7746e57f045d2dc37a.js&#34;&gt;&lt;/script&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://surfingthecode.com/images/visual-studio-project-file.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;This is the moment when you say, &lt;em&gt;&amp;ldquo;Hold on, do I really see you editing the project file and having the project loaded at the same time?&amp;rdquo;&lt;/em&gt;. Yes! Finally we don&amp;rsquo;t need to unload the project when manually changing .csproj. This thing alone is a big time-saver, I&amp;rsquo;m really happy about it.&lt;/p&gt;

&lt;h3 id=&#34;c-7-0-features&#34;&gt;C# 7.0 features&lt;/h3&gt;

&lt;p&gt;Now to the exercise. Let&amp;rsquo;s imagine we need to implement an integer parser, so given a string input &lt;code&gt;&amp;quot;123&amp;quot;&lt;/code&gt;, it will return an &lt;code&gt;int&lt;/code&gt; with value &lt;code&gt;123&lt;/code&gt;. We&amp;rsquo;ll create it as a static &lt;code&gt;IntegerParser&lt;/code&gt; class with &lt;code&gt;TryParse&lt;/code&gt; method, with some additional requirements:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;TryParse&lt;/code&gt; should accept an &lt;code&gt;object&lt;/code&gt; and return a &lt;code&gt;bool&lt;/code&gt; depending whether parsing was sucessful or not (a common pattern in many .NET classes)&lt;/li&gt;
&lt;li&gt;if parsing succeeds, the resulting &lt;code&gt;int&lt;/code&gt; will be assigned to an &lt;code&gt;out&lt;/code&gt; argument&lt;/li&gt;
&lt;li&gt;supported types are &lt;code&gt;string&lt;/code&gt; and &lt;code&gt;int&lt;/code&gt; (so &lt;code&gt;TryParse&lt;/code&gt; will have to check the actual type), in other cases an exception will be thrown.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Obviously these are weird and artificial requirements, but hopefully they will allow us to find some places where the new syntax of C# 7.0 makes the code more concise and expressive.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s how a quick implementation could look like:&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/atsvetkov/f0e8f82a9590ceda0edc0b157f11b68d.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;Running this produces the expected results:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Parsed System.Int32 123, got 123
Parsed System.String 2017, got 2017
Could not parse System.String -1
Could not parse System.String 1a2b3c
Error when parsing: IntegerParser only accepts strings ans integers, type &#39;System.Char&#39; is not supported
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Several things here leave to be desired:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;all those &lt;code&gt;if&lt;/code&gt;&amp;rsquo;s for type checking look very verbose and desperately want to be converted to a &lt;code&gt;switch&lt;/code&gt; statement, but unfortunately, &lt;code&gt;switch&lt;/code&gt; only works with &lt;a href=&#34;https://msdn.microsoft.com/en-us/library/exx3b86w.aspx&#34;&gt;integral types&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;private method &lt;code&gt;ParseString&lt;/code&gt; is only used in one place (maybe we actually &lt;em&gt;want&lt;/em&gt; it to be usable only in one place), so having a separate method declaration might seem an overkill (it&amp;rsquo;s pretty normal for C# developers, but could look strange for JavaScript or other functional languages developer, where &lt;a href=&#34;https://en.wikipedia.org/wiki/First-class_function&#34;&gt;functions are first-class citizen&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;all this logic in &lt;code&gt;Main&lt;/code&gt; where we have to declare a variable for the &lt;code&gt;out&lt;/code&gt; result, check the &lt;code&gt;bool&lt;/code&gt; result, and only in case of success we are actually interested in this value; it would be nicer to just get a result back, potentially multiple values at once.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let&amp;rsquo;s see what C# 7.0 can offer to tackle these issues.&lt;/p&gt;

&lt;h3 id=&#34;pattern-matching&#34;&gt;Pattern matching&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Pattern_matching&#34;&gt;Pattern matching&lt;/a&gt; is common in functional languages like &lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/articles/fsharp/language-reference/pattern-matching&#34;&gt;F#&lt;/a&gt; or &lt;a href=&#34;http://docs.scala-lang.org/tutorials/tour/pattern-matching.html&#34;&gt;Scala&lt;/a&gt; or &lt;a href=&#34;http://elixir-lang.org/getting-started/pattern-matching.html&#34;&gt;Elixir&lt;/a&gt;, but C# itself is now getting more functional too. C# 7.0 brings in support for &lt;em&gt;type pattern matching&lt;/em&gt; in &lt;code&gt;if&lt;/code&gt; and &lt;code&gt;switch&lt;/code&gt; statements, meaning that we can now have much richer &lt;code&gt;switch&lt;/code&gt; behaviour. This allows us to rewrite our &lt;code&gt;TryParse&lt;/code&gt; method like this:&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/atsvetkov/b5a903fad4daf8874f407c5f9cdb2456.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;The code is a bit terser now and doesn&amp;rsquo;t have ugly casts.&lt;/p&gt;

&lt;h3 id=&#34;local-functions&#34;&gt;Local functions&lt;/h3&gt;

&lt;p&gt;Yes, you guessed it - now functions can be defined inside a method. We could do something similar in C# 6.0 with &lt;em&gt;lambda expressions&lt;/em&gt;, but they have some limitations compared to normal methods (no &lt;code&gt;out&lt;/code&gt;, &lt;code&gt;ref&lt;/code&gt;, &lt;code&gt;params&lt;/code&gt; or optional parameters, cannot be generic). And obviously any &lt;code&gt;Func&lt;/code&gt; instance would mean an extra memory allocation, creating unnecesary pressure on garbage collector.&lt;/p&gt;

&lt;p&gt;With local functions we can rewrite our &lt;code&gt;TryParse&lt;/code&gt; method even further, including &lt;code&gt;ParseString&lt;/code&gt; in the body of the method:&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/atsvetkov/82eef08eb8cd6bdb84e86344d94f096c.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;Again, not that it makes a lot of sense to write it this way, but at least there is this option to declare small helper functions exactly where they are needed.&lt;/p&gt;

&lt;p&gt;Note that this is not some kind of crazy magic, the compiler will actually convert this local function into a &lt;code&gt;private static&lt;/code&gt; method, but from code perspective it will only be accessible in scope of the method it was defined in.&lt;/p&gt;

&lt;h3 id=&#34;out-variables&#34;&gt;Out variables&lt;/h3&gt;

&lt;p&gt;Having to pre-declare a variable for an &lt;code&gt;out&lt;/code&gt; parameter has always seemed like a code smell to me. In case of the popular &lt;code&gt;TryXXX&lt;/code&gt; pattern, obviously, I&amp;rsquo;m only interested in the &lt;em&gt;value&lt;/em&gt; of the variable, if my &lt;code&gt;TryXXX&lt;/code&gt; check returned &lt;code&gt;true&lt;/code&gt;, so why bother defining it in outer scope? Luckily, in C# 7.0 this is fixed! Visual Studio 2017 RC even displays a quick action lightbulb to suggest inlining this variable:&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://surfingthecode.com/images/visual-studio-out-variable.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;This allows to remove the pre-declaration of the &lt;code&gt;out&lt;/code&gt; variable, so that the compiler can declare it on-the-fly. Just one line less, but reads much better, I think:&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/atsvetkov/d2380a846b78cccd8fab1bf8ec1fcc6f.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;This &lt;code&gt;result&lt;/code&gt; variable is now &lt;em&gt;declared&lt;/em&gt; and &lt;em&gt;assigned&lt;/em&gt; as one statement, leaving the implementation details to the compiler.&lt;/p&gt;

&lt;h3 id=&#34;tuple-types-and-deconstruction&#34;&gt;Tuple types and deconstruction&lt;/h3&gt;

&lt;p&gt;Now, all this tweaking of &lt;code&gt;out&lt;/code&gt; variables and playing with &lt;code&gt;TryParse&lt;/code&gt; syntax is only hiding the real problem: essentially we want our method to return &lt;em&gt;two&lt;/em&gt; values at once: the success/failure flag and the result itself. Since C# methods don&amp;rsquo;t support returning multiple results, there are two common solutions to this: &lt;code&gt;out&lt;/code&gt;/&lt;code&gt;ref&lt;/code&gt; parameters or a special result type. We could indeed define a type which would hold two values we need and then check it from the client code:&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/atsvetkov/67372886923c30069ca7c3185346142a.js&#34;&gt;&lt;/script&gt;

&lt;script src=&#34;//gist.github.com/atsvetkov/ef7185260bea5025e24e20945dcca49e.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;But if we only need this result type for this single method and never reuse it anywhere else, this type declaration feels a bit redundant. If a class is only used once, maybe it doesn&amp;rsquo;t deserve to be explicitly declared. In fact, since .NET Framework 4.0 we have &lt;code&gt;Tuple&lt;/code&gt; class to the rescue, but it is a bit cumbersome to use with these meaningless &lt;code&gt;Item1&lt;/code&gt;, &lt;code&gt;Item2&lt;/code&gt; etc. property names.&lt;/p&gt;

&lt;p&gt;C# 7.0 makes tuples a first class citizen in syntax and compilation, so we can actually write methods which &lt;em&gt;look&lt;/em&gt; like they return multiple values. Under the hood, again, the compiler will use tuples, but the code will read much better. Let&amp;rsquo;s see how we can rewrite the &lt;code&gt;TryParse&lt;/code&gt; one last time:&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/atsvetkov/c9353788acac9eab9f5851bda321272f.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;(Note: for this to work you would need to install an additional &lt;a href=&#34;https://www.nuget.org/packages/System.ValueTuple/&#34;&gt;System.ValueTuple NuGet package&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;I think this code shows the &lt;em&gt;intent&lt;/em&gt; of the function much better, it is immediately visible what the return type(s) will be.&lt;/p&gt;

&lt;p&gt;The calling code can now be rewritten to assign the returned &lt;code&gt;bool&lt;/code&gt; and &lt;code&gt;int&lt;/code&gt; values to two variables in just one very readable line (this is called &lt;em&gt;deconstruction&lt;/em&gt; or &lt;em&gt;destructuring&lt;/em&gt;):&lt;/p&gt;

&lt;script src=&#34;//gist.github.com/atsvetkov/67a25415fe660c70498567c6261fc187.js&#34;&gt;&lt;/script&gt;

&lt;h3 id=&#34;new-refactorings&#34;&gt;New refactorings&lt;/h3&gt;

&lt;p&gt;You might have noticed that &lt;code&gt;IntegerParser&lt;/code&gt; class is defined in the same file where &lt;code&gt;Program&lt;/code&gt; lives. This is definitely not the best practice, so normally I would use ReSharper to apply &lt;em&gt;Move Type to Another File&lt;/em&gt; refactoring. This kind of handy tricks have always been the reason I would stick to ReSharper, even though I never liked to be so dependent on a specific tool.&lt;/p&gt;

&lt;p&gt;Well, now Visual Studio 2017 RC can do this too!&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://surfingthecode.com/images/visual-studio-extract-to-file-refactoring.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;&lt;a href=&#34;https://msdn.microsoft.com/magazine/mt790181&#34;&gt;Read more&lt;/a&gt; about refactorings and other productivity improvements.&lt;/p&gt;

&lt;h3 id=&#34;summary&#34;&gt;Summary&lt;/h3&gt;

&lt;p&gt;We went through a very artificial coding exercise, which hopefully showed how some of the new C# 7.0 features can make code a bit more readable and expressive. Besides language improvements, the new Visual Studio 2017 already looks like a great step towards better IDE performance and productivity. I am really looking forward to the final release in 2017!&lt;/p&gt;

&lt;p&gt;The source code of this silly integer parsing solution is available at &lt;a href=&#34;https://github.com/atsvetkov/csharp-7-vs-2017-short-demo&#34;&gt;https://github.com/atsvetkov/csharp-7-vs-2017-short-demo&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Thanks for reading and Merry Christmas!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>coffee and links 3</title>
      <link>https://surfingthecode.com/2016/12/coffee-and-links-3/</link>
      <pubDate>Fri, 16 Dec 2016 21:40:04 +0100</pubDate>
      
      <guid>https://surfingthecode.com/2016/12/coffee-and-links-3/</guid>
      <description>


&lt;figure &gt;
    
        &lt;img src=&#34;https://surfingthecode.com/images/coffee-and-links-3.jpg&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;h3 id=&#34;news&#34;&gt;News&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.bloomberg.com/news/articles/2016-12-13/alphabet-creates-new-self-driving-car-business-called-waymo&#34;&gt;Google keeps working on self-driving cars&lt;/a&gt;, now as &lt;a href=&#34;https://waymo.com/&#34;&gt;Waymo&lt;/a&gt;, a separate company under &lt;a href=&#34;https://abc.xyz/&#34;&gt;Alphabet&lt;/a&gt;. It&amp;rsquo;s also interesting to read &lt;a href=&#34;https://www.bloomberg.com/news/features/2016-12-08/google-makes-so-much-money-it-never-had-to-worry-about-financial-discipline&#34;&gt;about the changes in Google&amp;rsquo;s business and internal projects during last years&lt;/a&gt;. Despite all the experiments they are doing, a major part of the revenue still comes from advertising. But company leaders claim that this as a tool to achieve more significant goals rather than a goal on its own.&lt;/li&gt;
&lt;/ul&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://surfingthecode.com/images/google_revenue.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Amazon rethinks shopping with &lt;a href=&#34;https://www.amazon.com/b?node=16008589011&#34;&gt;Amazon Go&lt;/a&gt;, getting wireless payments to the next level. I can&amp;rsquo;t wait for this to become mainstream!&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Yahoo reveals that &lt;a href=&#34;https://www.wired.com/2016/12/yahoo-hack-billion-users/&#34;&gt;1 billion user accounts were compromised&lt;/a&gt;, making it &lt;em&gt;&amp;ldquo;the biggest known hack of user data ever&amp;rdquo;&lt;/em&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Microsoft wants us to &lt;a href=&#34;http://www.theverge.com/2016/12/13/13935136/microsoft-cortana-windows-10-iot-devices&#34;&gt;talk to fridges and toasters&lt;/a&gt;, integrating Cortana into home devices. Yeah, why not. &lt;em&gt;Hey, fridge, how much beer is left?&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;languages-and-frameworks&#34;&gt;Languages and frameworks&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;If you are already preparing your New Year resolutions and the list includes something like &lt;em&gt;catch up with JavaScript&lt;/em&gt;, then you might want to check out &lt;a href=&#34;https://medium.com/javascript-scene/top-javascript-frameworks-topics-to-learn-in-2017-700a397b711#.qe16jz7ue&#34;&gt;Top JavaScript Frameworks &amp;amp; Topics to Learn in 2017&lt;/a&gt;. Quite an opinionated view, but makes a lot of sense to me. Choosing between top contenders, Angular 2 and React, personally I&amp;rsquo;d bet on and invest into the latter. And if you feel fed up with the JavaScript frameworks altogether, maybe refresh the core skills by taking &lt;a href=&#34;https://javascript30.com/&#34;&gt;free 30-day vanilla JavaScript course&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;At some point most .NET developers have to deal with &lt;a href=&#34;https://msdn.microsoft.com/en-us/library/f7ykdhsy.aspx&#34;&gt;reflection&lt;/a&gt;. And soon after they learn that reflection API is slow (by design) and has to be used with caution. &lt;a href=&#34;http://mattwarren.org/2016/12/14/Why-is-Reflection-slow/&#34;&gt;Matt Warren explains why and shows some benchmarks&lt;/a&gt;, demonstrating that, for instance, calling a property getter through a delegate is 8 times slower than the direct invocation, while calling it through reflection is 900 times slower. Always good to be aware of the relative speed.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;tools&#34;&gt;Tools&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://benchmarkdotnet.org/&#34;&gt;BenchmarkDotNet&lt;/a&gt; is an open-source .NET benchmarking library by same Matt Warren, which allows to measure performance of specific methods by marking them with a special attribute and then passing to the benchmark runner class:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class Md5VsSha256
{
    ...
    [Benchmark]
    public byte[] Sha256()
    {
        return sha256.ComputeHash(data);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;var summary = BenchmarkRunner.Run&amp;lt;Md5VsSha256&amp;gt;();
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Speaking about performance in .NET, too many memory allocations might create a lot of pressure on garbage collector, which will result in frequent collections, stealing precious CPU time. Obviously, some allocations are necessary (like when you are actually *new*ing up an instance of a class), but some are less obvious and can be avoided (boxing, expressions, method arguments marked as &lt;em&gt;params&lt;/em&gt; etc.). &lt;a href=&#34;http://resharper-plugins.jetbrains.com/packages/Resharper.HeapView.R90/&#34;&gt;ReSharper Heap Allocation plugin&lt;/a&gt; (or, if you are not using ReSharper, &lt;a href=&#34;https://github.com/Microsoft/RoslynClrHeapAllocationAnalyzer&#34;&gt;Roslyn CLR Heap Allocation Analyzer&lt;/a&gt;) will highlight all memory allocations, so that you can at least see and evaluate them.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://surfingthecode.com/images/resharper_heap_allocations.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;h3 id=&#34;fun&#34;&gt;Fun&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;With &lt;a href=&#34;http://radio.garden/live/zoersel/zoe/&#34;&gt;Radio Garden&lt;/a&gt; you can rotate the globe and pick one of the radio stations playing at a certain geographic point. Pretty cool for someone living abroad and feeling homesick.&lt;/li&gt;
&lt;/ul&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://surfingthecode.com/images/radio_garden.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;ul&gt;
&lt;li&gt;&lt;p&gt;True emoji should be text-only, so get creative with &lt;a href=&#34;https://ascii.li/emoticon-creator&#34;&gt;Text Emoticon Generator&lt;/a&gt;!&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;╮(•‿•)╭
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;There are &lt;a href=&#34;http://www.internetlivestats.com/total-number-of-websites/&#34;&gt;over 1 billion websites&lt;/a&gt; on the World Wide Web today and the total amount of data online is measured in &lt;a href=&#34;https://en.wikipedia.org/wiki/Exabyte&#34;&gt;exabytes&lt;/a&gt;. So it is particularly funny to see that &lt;a href=&#34;https://twitter.com/workergnome/status/807704855276122114&#34;&gt;the map of the Internet as of May 1973&lt;/a&gt; would fit on a single sheet of paper.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;other&#34;&gt;Other&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://techbeacon.com/how-best-organize-agile-teams-build-around-autonomy-mastery-purpose&#34;&gt;This article about organizing agile teams&lt;/a&gt; really resonated with me. I totally agree with the author that good teams are self-sufficient, internally motivated and driven by their own desire to deliver something meaningful.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;&amp;ldquo;That’s because people don&amp;rsquo;t work to be agile. People work for their satisfaction. Often, autonomy, mastery, and purpose will satisfy them. Keep people satisfied at the personal level and they will provide the results you want in their team.&amp;rdquo;&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;How do you estimate the total number of German tanks only having several ones captured? &lt;a href=&#34;https://en.wikipedia.org/wiki/German_tank_problem&#34;&gt;A fascinating application of statistical theory to a very specific problem during World War II&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;TED is publishing a link to a selected talk every day in December, calling it &lt;a href=&#34;http://www.tedxbasel.com/txb-blog/?tag=31+days+of+ideas&#34;&gt;31 days of ideas&lt;/a&gt;. A nice and not-too-time-consuming way to learn ideas from various areas and get inspired. Highly recommended for broadening your horizons.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Practice makes perfect</title>
      <link>https://surfingthecode.com/2016/12/practice-makes-perfect/</link>
      <pubDate>Tue, 06 Dec 2016 21:50:43 +0100</pubDate>
      
      <guid>https://surfingthecode.com/2016/12/practice-makes-perfect/</guid>
      <description>
&lt;figure &gt;
    
        &lt;img src=&#34;https://surfingthecode.com/images/practice_makes_perfect.jpg&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;blockquote&gt;
&lt;p&gt;Contrary to what you might believe, merely doing your job every day doesn&amp;rsquo;t qualify as real practice. Going to meetings isn&amp;rsquo;t practicing your people skills, and replying to mail isn&amp;rsquo;t practicing your typing. You have to set aside some time once in a while and do focused practice in order to get better at something.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;(&lt;em&gt;Steve Yegge, &lt;a href=&#34;https://sites.google.com/site/steveyegge2/practicing-programming&#34;&gt;Practicing Programming&lt;/a&gt;&lt;/em&gt;)&lt;/p&gt;

&lt;p&gt;I couldn&amp;rsquo;t agree more. More often than not we developers tend to write code only during working hours. It&amp;rsquo;s about eight hours and (hopefully) most of those are spent &lt;em&gt;actually&lt;/em&gt; programming, so that seems quite enough, right?&lt;/p&gt;

&lt;p&gt;Wrong!&lt;/p&gt;

&lt;p&gt;Well, of course, it depends. We all have lives and keeping the work-life balance is arguably more important than anything else (I am absolutely going to write a separate post about this). But still most great developers became great through constant practice, often outside of working hours. And if you think about it, this is quite normal for other professions, like doctors or musicians. From the same article:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I have trouble thinking of any modestly difficult profession in which continuous study and practice aren&amp;rsquo;t the norm. Fighter pilots train in simulators before getting into the latest jet. Actors and politicians practice their lines and their smiles. Opera troupes do mock performances before public appearances. Writers, poets, and artists attend workshops, and study the work of the Masters.&lt;/p&gt;

&lt;p&gt;Everyone practices &amp;ndash; everyone, that is, except for us. We just grind stuff out, day in, day out. Are you as embarrassed about the state of our profession as I am?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I always compare it to running. Do you join a competition right away or you practice first? Do you run marathons without training between them? And, in my opinion, all of this is applicable to programming: every minute of focused practice trains your abstract thinking muscle and makes it easier to turn mental models into working code next time you actually need it.&lt;/p&gt;

&lt;p&gt;So, how to practice?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Jeff Atwood has &lt;a href=&#34;https://blog.codinghorror.com/the-ultimate-code-kata/&#34;&gt;a blog post exactly about this&lt;/a&gt;, where he gives some good advice on this matter. Using &lt;em&gt;coding kata&lt;/em&gt; is a well-known approach to learn TDD, a famous &lt;a href=&#34;http://osherove.com/tdd-kata-1/&#34;&gt;String Calculator&lt;/a&gt; being one of the most popular. There are &lt;a href=&#34;http://codekata.com/&#34;&gt;many&lt;/a&gt; &lt;a href=&#34;https://github.com/garora/TDD-Katas&#34;&gt;other&lt;/a&gt; similar resources, even &lt;a href=&#34;http://www.codekatas.org/casts/tagged/csharp&#34;&gt;a site with code kata video casts&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://www.exercism.io/&#34;&gt;Exercism&lt;/a&gt;, an interesting project which allows you to practise in solving programming problems in various popular languages (personally, I started learning &lt;a href=&#34;https://golang.org/&#34;&gt;Go&lt;/a&gt; on this site some time ago).&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://projecteuler.net/&#34;&gt;Project Euler&lt;/a&gt; was created in 2001 and is still a very popular source of challenging mathematical/programming problems. These can be quite hard and will require you to brush up your algorithms/data structures skills. I did solve some, but was never too serious about that, which left me with only 17 out of 570 problems finished so far (perhaps I should add the rest to my New Year resolutions).&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://projecteuler.net/profile/atsvetkov.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;ul&gt;
&lt;li&gt;And here&amp;rsquo;s a bonus link, my favourite at the moment: &lt;a href=&#34;http://adventofcode.com/&#34;&gt;Advent of Code&lt;/a&gt;, a set of programming puzzles for each day of December until Christmas. Every day a new one is unlocked, just like in any advent calendar, and the problems themselves are described in a hilarious way, which definitely makes it fun to work on them. Who wouldn&amp;rsquo;t want to help Santa using your programming skills?&lt;/li&gt;
&lt;/ul&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://surfingthecode.com/images/advent_of_code.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;I only found this site two days ago, so there are already several puzzles to catch up, but this is a really fun way of practicing. Will definitely keep going and encourage you to check it out too.&lt;/p&gt;

&lt;p&gt;As Neil Gaiman said, &lt;em&gt;&amp;ldquo;you learn by finishing things&amp;rdquo;&lt;/em&gt;, so just doing one small programming exercise (non work-related!) a day will be of great help on your road to mastery.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>coffee and links 2</title>
      <link>https://surfingthecode.com/2016/11/coffee-and-links-2/</link>
      <pubDate>Sat, 19 Nov 2016 14:17:47 +0100</pubDate>
      
      <guid>https://surfingthecode.com/2016/11/coffee-and-links-2/</guid>
      <description>

&lt;p&gt;This was a week of &lt;a href=&#34;https://connectevent.microsoft.com&#34;&gt;Microsoft Connect 2016&lt;/a&gt;, an event where yet another bunch of cool announcements were made. However, being a good software engineer means not restricting yourself to a single technology, so I have some awesome non-Microsoft things to share as well. Let&amp;rsquo;s jump straight in!&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://surfingthecode.com/images/coffee-and-links-2.jpg&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;h3 id=&#34;news&#34;&gt;News&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Microsoft used to be one of those companies on the far end on the &amp;ldquo;opensourceness&amp;rdquo; spectrum, and .NET itself seemed to be almost an antonim of &amp;ldquo;open source&amp;rdquo;. These days are gone! Just look at this: &lt;a href=&#34;https://techcrunch.com/2016/11/16/microsoft-joins-the-linux-foundation/&#34;&gt;Microsoft is joining the Linux Foundation&lt;/a&gt;, while &lt;a href=&#34;https://cloudplatform.googleblog.com/2016/11/Google-Cloud-to-join-NET-Foundation-Technical-Steering-Group.html&#34;&gt;Google is joining the .NET Foundation&lt;/a&gt;. Generally this means that both companies are getting more and more committed to contributing to the open source tools and products from both worlds, which is amazing news for all developers. It is not that crazy or surprising, though, given that &lt;a href=&#34;https://azure.microsoft.com/en-us/blog/powershell-is-open-sourced-and-is-available-on-linux/&#34;&gt;PowerShell now runs on Linux&lt;/a&gt;, &lt;a href=&#34;https://insights.ubuntu.com/2016/11/16/microsoft-loves-linux-ubuntu-available-on-sql-server-public-preview&#34;&gt;SQL Server preview runs on Ubuntu&lt;/a&gt; and &lt;a href=&#34;https://cloudplatform.googleblog.com/2016/08/making-ASP.NET-apps-first-class-citizens-on-Google-Cloud-Platform.html&#34;&gt;Google Cloud supports ASP.NET web applications&lt;/a&gt;. It&amp;rsquo;s all so mixed up now&amp;hellip; which is awesome!&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Visual Studio 2017 Release Candidate (formerly known as Visual Studio 15) &lt;a href=&#34;https://msdn.microsoft.com/magazine/mt790181&#34;&gt;is now available&lt;/a&gt;. There are lots of productivity and performance improvements, for example, solutions and projects should be loading 2-4 times faster than in VS 2015. I&amp;rsquo;m really looking forward to it, as well as to the &lt;a href=&#34;https://msdn.microsoft.com/magazine/mt790184&#34;&gt;new language features of C# 7.0&lt;/a&gt;. And finally there is &lt;a href=&#34;https://msdn.microsoft.com/magazine/mt790182&#34;&gt;Visual Studio for Mac&lt;/a&gt;! Not that I am personally going to use it, but it is just cool to see how Microsoft can leverage existing open-source tools to expand into the new market (VS for Mac is built on top of &lt;a href=&#34;http://www.monodevelop.com/&#34;&gt;MonoDevelop&lt;/a&gt; and VS Code - on top of &lt;a href=&#34;https://atom.io/&#34;&gt;Atom&lt;/a&gt;).&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://blogs.msdn.microsoft.com/webdev/2016/11/16/announcing-asp-net-core-1-1/&#34;&gt;ASP.NET Core 1.1&lt;/a&gt; is released, featuring even higher performance rating on &lt;a href=&#34;https://www.techempower.com/blog/2016/11/16/framework-benchmarks-round-13/&#34;&gt;TechEmpower&lt;/a&gt;, URL rewriting, response caching, Web Listener server on Windows (can be used instead of Kestrel to utilize Windows-specific features) and more. It is still based on project.json file, but there are already working on switching back to .csproj and msbuild - a much improved version of a familiar tooling (more details on the alpha version of this &lt;a href=&#34;https://blogs.msdn.microsoft.com/dotnet/2016/11/16/announcing-net-core-tools-msbuild-alpha/&#34;&gt;here&lt;/a&gt;).&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Jimmy Bogard, the creator of &lt;a href=&#34;https://github.com/AutoMapper/AutoMapper&#34;&gt;AutoMapper&lt;/a&gt; and &lt;a href=&#34;https://github.com/jbogard/MediatR&#34;&gt;MediatR&lt;/a&gt;, has updated his sample project &lt;a href=&#34;https://github.com/jbogard/contosouniversitycore&#34;&gt;Contoso University&lt;/a&gt; to .NET Core. It shows how to use all these fancy tools together, applying &lt;a href=&#34;http://martinfowler.com/bliki/CQRS.html&#34;&gt;CQRS&lt;/a&gt; pattern and NOT overengineering the solution structure (Jimmy is a big advocate of using a simpler setup and &lt;a href=&#34;https://lostechies.com/jimmybogard/2012/08/30/evolutionary-project-structure/&#34;&gt;preferring folders over projects for layering&lt;/a&gt;). I really like the way he looks into the common software development problems and finds reasonable no-nonsense solutions. He is also an excellent speaker, so when you have time, watch some of his &lt;a href=&#34;https://vimeo.com/search?q=jimmy+bogard&#34;&gt;NDC talks&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;languages-and-frameworks&#34;&gt;Languages and frameworks&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://programming.witheve.com/&#34;&gt;Eve: Programming designed for humans&lt;/a&gt; - quite an unusual approach to designing a programming language and an IDE together to provide a unique and human-friendly experience. Perhaps not for every project, but certainly interesting for some.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://vuejs.org/&#34;&gt;Vue.js&lt;/a&gt;, yet another JavaScript framework rapidly gaining popularity, &lt;a href=&#34;https://medium.com/the-vue-point/vue-2-0-is-here-ef1f26acf4b8#.w0mmh55at&#34;&gt;has recently got a new 2.0 release&lt;/a&gt;. I like the philosophy behind it, especially the idea of a &lt;em&gt;progressive framework&lt;/em&gt;, which allows you to start quickly with the smallest subset of features and only add more when your application has grown big enough. The author, Evan You, explains this nicely in &lt;a href=&#34;https://www.youtube.com/watch?v=pBBSp_iIiVM&#34;&gt;his talk at UtahJS conference&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;If you want more functional programming features in your .NET code, but switching to F# is not an option, there is &lt;a href=&#34;https://github.com/louthy/language-ext&#34;&gt;C# Functional Language Extensions&lt;/a&gt; project to the rescue. Using &lt;a href=&#34;http://geekswithblogs.net/BlackRabbitCoder/archive/2015/04/16/c.net-little-wonders-static-using-statements-in-c-6.aspx&#34;&gt;static usings from C# 6.0&lt;/a&gt; in a clever way, this library allows you to write code that looks and feels pretty much like F# or any other functional language:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;List&amp;lt;int&amp;gt; items = List(1,2,3,4,5); // static method as constructor function instead of your typical &#39;new List&#39;
var x = map(opt, v =&amp;gt; v * 2); // static method to mimic a globally available &#39;map&#39; function as a primitive
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;tools&#34;&gt;Tools&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Even in the latest version the IIS Manager tool still looks terribly outdated and doesn&amp;rsquo;t exactly provide a nice user experience. Fear not! There is now a new web-based tool for managing IIS, which provides a full-blown REST API and a default Angular-based web UI for that purpose. Check out the &lt;a href=&#34;https://blogs.iis.net/adminapi/microsoft-iis-administration-api-preview&#34;&gt;Microsoft IIS Administration Preview&lt;/a&gt;. This looks so much more like it&amp;rsquo;s 2016 today, doesn&amp;rsquo;t it?

&lt;figure &gt;
    
        &lt;img src=&#34;https://surfingthecode.com/images/iis_manager_preview.png&#34; /&gt;
    
    
&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;fun&#34;&gt;Fun&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;&amp;ldquo;90% of everything is crap&amp;rdquo;&lt;/em&gt;, &lt;em&gt;&amp;ldquo;Communication usually fails, except by accident&amp;rdquo;&lt;/em&gt; and other wittyful observations in &lt;a href=&#34;https://www.exceptionnotfound.net/15-fundamental-laws-of-the-internet/?utm_source=feedburner&amp;amp;utm_medium=feed&amp;amp;utm_campaign=Feed%3A+ExceptionNotFound+%28Exception+Not+Found%29&#34;&gt;15 Fundamental Laws of the Internet&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Some kind of Google neural network will try to recognize what you are drawing: &lt;a href=&#34;https://quickdraw.withgoogle.com/&#34;&gt;Quick, draw!&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;other&#34;&gt;Other&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://bravenewgeek.com/you-are-not-paid-to-write-code&#34;&gt;You are not paid to write code&lt;/a&gt; - a very nice read about the essence of programming and risks of having engineers build and maintain systems just for the sake of systems, not to solve a real business problem.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;&amp;ldquo;But if you set up a system, you are likely to find your time and effort now being consumed in the care and feeding of the system itself. New problems are created by its very presence. Once set up, it won&amp;rsquo;t go away, it grows and encroaches.&amp;rdquo;&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;p&gt;P.S. Usually I write these posts in VS Code, just because the whole blog is stored in a github repository, so it is kind of natural to treat is as a code base. However, I always enjoy pushing myself out of the comfort zone and optimizing the coding experience. That&amp;rsquo;s why I am now learning to use &lt;a href=&#34;http://www.vim.org&#34;&gt;Vim&lt;/a&gt;, a text editor which is more common in Unix OS, but can be used anywhere. The general idea, as I see it, is to keep your fingers on the home row of the keyboard and minimize unnecessary movement. Learning curve is quite steep, but the benefits are tempting. So in fact this entire post has been authored in Vim (at least doubling the writing time)! And you don&amp;rsquo;t necesssarily have to use the old-school console version, there is &lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=JaredParMSFT.VsVim&#34;&gt;an extension for Visual Studio&lt;/a&gt; and &lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=vscodevim.vim&#34;&gt;one for Visual Studio Code too&lt;/a&gt;, which emulate Vim-like keybindings. Check it out and don&amp;rsquo;t forget: to quit Vim, you type &lt;code&gt;:wq!&lt;/code&gt;.&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://surfingthecode.com/images/twitter_vi.png&#34; /&gt;
    
    
&lt;/figure&gt;

</description>
    </item>
    
    <item>
      <title>coffee and links 1</title>
      <link>https://surfingthecode.com/2016/11/coffee-and-links-1/</link>
      <pubDate>Sat, 12 Nov 2016 15:00:54 +0100</pubDate>
      
      <guid>https://surfingthecode.com/2016/11/coffee-and-links-1/</guid>
      <description>

&lt;p&gt;Sometimes I find interesting things on the web, which don&amp;rsquo;t belong to a single category. Just random articles or news about technology. Since I still want to share these findings and because I normally do this kind of reading at the start of the day, I will be publishing this as a &lt;em&gt;Coffee and links&lt;/em&gt; digest.&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://surfingthecode.com/images/coffee-and-links-1.jpg&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;h3 id=&#34;news&#34;&gt;News&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://blogs.technet.microsoft.com/hybridcloud/2016/09/26/announcing-the-launch-of-windows-server-2016/&#34;&gt;This autumn Microsoft has launched Windows Server 2016&lt;/a&gt;, with lots of improvements and new features, like &lt;a href=&#34;https://blog.docker.com/2016/09/build-your-first-docker-windows-server-container/&#34;&gt;containers support&lt;/a&gt; (Docker containers can now natively run on Windows) and &lt;a href=&#34;https://technet.microsoft.com/en-us/windows-server-docs/get-started/getting-started-with-nano-server&#34;&gt;a lightweight GUI-less version called &lt;em&gt;Nano Server&lt;/em&gt;&lt;/a&gt; (small, fast, and perfect as a hosting platform).&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Another thing from Microsoft: a new communication platform called &lt;a href=&#34;https://products.office.com/en-us/microsoft-teams/group-chat-software&#34;&gt;Microsoft Teams&lt;/a&gt;, which seems to target the market where &lt;a href=&#34;https://slack.com/&#34;&gt;Slack&lt;/a&gt; dominates, but has an additional benefit of Office 365 integration. Slack was apparently so scared with this announcement that they posted a public letter to Microsoft, written in a condescending tone and reminding &lt;a href=&#34;http://aaplinvestors.net/marketing/seriously/&#34;&gt;a famous welcoming letter from Apple to IBM published in Wall Street Journal in 1981&lt;/a&gt;. Some people think that &lt;a href=&#34;http://www.theverge.com/2016/11/3/13504932/slack-microsoft-teams-letter-wtf&#34;&gt;Slack will regret doing this&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;If you have ever passed any Microsoft certification exams, this one might be interesting for you: Microsoft has partnered with &lt;a href=&#34;https://www.youracclaim.com/&#34;&gt;Acclaim&lt;/a&gt; to provide &lt;a href=&#34;https://www.microsoft.com/en-us/learning/badges.aspx#mcsa&#34;&gt;a digital badges system&lt;/a&gt; for displaying your certification status. &lt;a href=&#34;https://www.youracclaim.com/badges/e7345db9-f7c8-4727-b020-3aeceb39b3d6/public_url&#34;&gt;Showing off has never been easier!&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;https://surfingthecode.com/images/AcclaimBadge.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;ul&gt;
&lt;li&gt;&lt;p&gt;If you are still looking into where and how to start using .NET Core, Jon Hilton found a bunch of sample projects to look into and learn from (here&amp;rsquo;s &lt;a href=&#34;https://jonhilton.net/2016/10/12/learning-dotnet-core-by-example/&#34;&gt;part 1&lt;/a&gt; and &lt;a href=&#34;https://jonhilton.net/2016/11/03/learn-dot-net-core-by-example-part-ii/&#34;&gt;part 2&lt;/a&gt;). I am definitely going to check these out.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://blogs.msdn.microsoft.com/dotnet/2016/11/09/net-core-data-access/&#34;&gt;Lots of different databases and ORM frameworks already have support for .NET Core&lt;/a&gt;. Always interesting to see how people abuse (in a good way) different database systems: for example, &lt;a href=&#34;http://dontcodetired.com/blog/post/NET-Document-Databases-with-Marten&#34;&gt;Marten&lt;/a&gt; is a document database built on top of a relational one (&lt;a href=&#34;https://www.postgresql.org/&#34;&gt;PostgreSQL&lt;/a&gt;). Actually, &lt;a href=&#34;https://octopus.com/blog/3.0-switching-to-sql&#34;&gt;in version 3.0 has Octopus Deploy migrated&lt;/a&gt; from &lt;a href=&#34;https://ravendb.net/&#34;&gt;RavenDB&lt;/a&gt; to SQL Server, but &lt;a href=&#34;https://octopus.com/blog/sql-as-document-store&#34;&gt;they creatively use it as a document storage too&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;tools&#34;&gt;Tools&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://www.pumascan.com/&#34;&gt;Puma&lt;/a&gt; is a security scanner for Visual Studio built on top of &lt;a href=&#34;https://github.com/dotnet/roslyn&#34;&gt;Roslyn&lt;/a&gt;, which can detect &lt;a href=&#34;https://www.owasp.org&#34;&gt;OWASP&lt;/a&gt; vulnerabilities by means of static code analysis. It can be installed into a single project as a &lt;a href=&#34;https://www.nuget.org/packages/Puma.Security.Rules/&#34;&gt;NuGet package&lt;/a&gt; or added globally as a &lt;a href=&#34;https://visualstudiogallery.msdn.microsoft.com/80206c43-348b-4a21-9f84-a4d4f0d85007&#34;&gt;Visual Studio extension&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://intercoolerjs.org/&#34;&gt;Intercooler.js&lt;/a&gt; is an interesting attempt to simplify working with AJAX requests from client-side code. What if you could define which endpoint to call from the markup itself? No viewmodels needed, just like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;-- This anchor tag posts to &#39;/click&#39; when it is clicked --&amp;gt;
&amp;lt;a ic-post-to=&amp;quot;/click&amp;quot;&amp;gt; Click Me! &amp;lt;/a&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It allows you to make GET/POST requests, automatically render returned response as HTML inside the corresponding tag, easily integrate with the rest of your JavaScript code and much more (check out the &lt;a href=&#34;http://intercoolerjs.org/examples/index.html&#34;&gt;examples&lt;/a&gt;). Might be an interesting way of composing the elements of a web application into completely self-sufficient widgets. And it&amp;rsquo;s only 6.74KB gzipped.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;fun&#34;&gt;Fun&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Is there a single geek out there who has never played Pac-Man? If this brings up good memories from your childhood (it absolutely does for me), then you may want to read &lt;a href=&#34;http://www.gamasutra.com/view/feature/3938/the_pacman_dossier.php?print=1&#34;&gt;a history of the famous game and even some gameplay analysis&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;other&#34;&gt;Other&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://sidbala.com/h-264-is-magic&#34;&gt;This is the best explanation of video compression I have ever read&lt;/a&gt;. It is not a trivial topic at all, but Sid Bala made it super easy to follow and understand with the help of carefully chosen words like &lt;em&gt;entropy&lt;/em&gt; and &lt;em&gt;mindfuck&lt;/em&gt;.&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Some facts about WiX</title>
      <link>https://surfingthecode.com/2016/10/some-facts-about-wix/</link>
      <pubDate>Thu, 27 Oct 2016 22:20:54 +0200</pubDate>
      
      <guid>https://surfingthecode.com/2016/10/some-facts-about-wix/</guid>
      <description>&lt;p&gt;Before we start, let me ask you a question: do you know what is the oldest still active open source .NET project?&lt;/p&gt;

&lt;p&gt;Today I was again listening to awesome &lt;a href=&#34;https://www.dotnetrocks.com/&#34;&gt;.NET Rocks&lt;/a&gt; podcast and the guest was Rob Mensching, the guy behind &lt;a href=&#34;http://wixtoolset.org/&#34;&gt;Wix Toolset&lt;/a&gt;. WiX provides a bunch of tools to simplify the creation of MSI packages for Windows, and as far as I know, it is one of the most popular open-source implementations in that area. And it is also free! We use it for the product I am currently working on. Hell, even Microsoft is using it: &lt;a href=&#34;https://github.com/dotnet/cli/blob/rel/1.0.0/packaging/windows/clisdk/dotnet.wxs&#34;&gt;see for yourself&lt;/a&gt; that the current .NET Core installer is actually built with WiX! In fact, Rob Mensching used to work in Microsoft on setup and deployment for Office, Windows and Visual Studio. Obviously, he knows more about installers than most people do, enough to build a business around it. So he is now a CEO and a co-founder of &lt;a href=&#34;https://www.firegiant.com/&#34;&gt;Fire Giant&lt;/a&gt;, a company providing commercial support for WiX Toolset.&lt;/p&gt;

&lt;p&gt;In a nutshell, WiX allows to define the package contents and installation steps in a declarative way, using XML files like this (taken from &lt;a href=&#34;https://www.firegiant.com/wix/tutorial/getting-started/&#34;&gt;WiX documentation&lt;/a&gt;):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?xml version=&#39;1.0&#39; encoding=&#39;windows-1252&#39;?&amp;gt;
&amp;lt;Wix xmlns=&#39;http://schemas.microsoft.com/wix/2006/wi&#39;&amp;gt;
    &amp;lt;Product Name=&#39;Foobar 1.0&#39; Manufacturer=&#39;Acme Ltd.&#39;
        Id=&#39;YOURGUID-86C7-4D14-AEC0-86416A69ABDE&#39; 
        UpgradeCode=&#39;YOURGUID-7349-453F-94F6-BCB5110BA4FD&#39;
        Language=&#39;1033&#39; Codepage=&#39;1252&#39; Version=&#39;1.0.0&#39;&amp;gt;
    &amp;lt;Package Id=&#39;*&#39; Keywords=&#39;Installer&#39; Description=&amp;quot;Acme&#39;s Foobar 1.0 Installer&amp;quot;
        Comments=&#39;Foobar is a registered trademark of Acme Ltd.&#39; Manufacturer=&#39;Acme Ltd.&#39;
        InstallerVersion=&#39;100&#39; Languages=&#39;1033&#39; Compressed=&#39;yes&#39; SummaryCodepage=&#39;1252&#39; /&amp;gt;

...

&amp;lt;Directory Id=&#39;ProgramFilesFolder&#39; Name=&#39;PFiles&#39;&amp;gt;
    &amp;lt;Directory Id=&#39;Acme&#39; Name=&#39;Acme&#39;&amp;gt;
        &amp;lt;Directory Id=&#39;INSTALLDIR&#39; Name=&#39;Foobar 1.0&#39;&amp;gt;

...

&amp;lt;Component Id=&#39;HelperLibrary&#39; Guid=&#39;YOURGUID-6BE3-460D-A14F-75658D16550B&#39;&amp;gt;
    &amp;lt;File Id=&#39;HelperDLL&#39; Name=&#39;Helper.dll&#39; DiskId=&#39;1&#39; Source=&#39;Helper.dll&#39; KeyPath=&#39;yes&#39; /&amp;gt;
&amp;lt;/Component&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Of course, it can do much more than just that, but I&amp;rsquo;m not going into too much detail. Instead I encourage you to &lt;a href=&#34;https://www.dotnetrocks.com/?show=1367&#34;&gt;check out the podcast&lt;/a&gt; and learn something new about installers business in general and WiX in particular. I learned a couple of things I didn&amp;rsquo;t know before. First, there is a version 4 of WiX in development, which is a rewrite, so it should be better in all ways (&lt;a href=&#34;https://github.com/wixtoolset/wix4&#34;&gt;source code is available on GitHub&lt;/a&gt;). And second&amp;hellip;&lt;/p&gt;

&lt;p&gt;&amp;hellip;and the second new thing actually brings us to the question I asked in the beginning. Turns out that nobody really knows what &lt;em&gt;the&lt;/em&gt; oldest .NET open source project is, but WiX comes pretty damn close: it started in 1999 and was publicly released for the first time in 2004. So by any measure it is more than ten years old now! Two other pretty old and well-known ones are &lt;a href=&#34;http://www.nunit.org/&#34;&gt;NUnit&lt;/a&gt; in 2002 (a unit testing framework) and &lt;a href=&#34;http://www.mono-project.com/&#34;&gt;Mono&lt;/a&gt; in 2000-2001 (cross platform .NET framework that allowed to run C# and VB code on Linux long before &lt;a href=&#34;https://www.microsoft.com/net/core&#34;&gt;.NET Core&lt;/a&gt; came into being). Some discussions about those old open source projects took place in &lt;a href=&#34;https://twitter.com/robmen/status/692843420981661696&#34;&gt;this Rob&amp;rsquo;s tweet&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I personally think this is exciting: although Microsoft has only recently started to move towards open-source community, the community itself has been around for more than a decade now and has built tons of great tools and products.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>